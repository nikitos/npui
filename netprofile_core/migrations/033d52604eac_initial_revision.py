"""Initial revision

Revision ID: 033d52604eac
Revises: 
Create Date: 2017-09-22 14:57:51.625788

"""

# revision identifiers, used by Alembic.
revision = '033d52604eac'
down_revision = None
branch_labels = ('core',)
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy import FetchedValue
from netprofile.db import ddl as npd
from netprofile.db import fields as npf

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('comms_types',
    sa.Column('commtid', npf.UInt32(), npd.Comment('Communication channel type ID'), nullable=False, default=sa.Sequence('comms_types_commtid_seq')),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Communication channel name'), nullable=False),
    sa.Column('icon', npf.ASCIIString(length=32), npd.Comment('Icon name'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('impp', npf.ASCIIString(length=32), npd.Comment('vCard IMPP URI prefix'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('urifmt', sa.Unicode(length=255), npd.Comment('URI format string'), server_default='{proto}:{address}', nullable=False),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Communication channel type description'), server_default=sa.text('NULL'), nullable=True),
    sa.PrimaryKeyConstraint('commtid', name=op.f('comms_types_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('comms_types', 'Communication channel types')
    op.create_index('comms_types_i_impp', 'comms_types', ['impp'], unique=False)
    op.create_index('comms_types_u_name', 'comms_types', ['name'], unique=True)
    op.create_table('dav_history',
    sa.Column('dhistid', npf.UInt64(), npd.Comment('DAV history item ID'), nullable=False, default=sa.Sequence('dav_history_dhistid_seq')),
    sa.Column('collid', npf.ASCIIString(length=32), npd.Comment('DAV collection ID'), nullable=False),
    sa.Column('changeid', npf.Int64(), npd.Comment('DAV sequential history change ID'), nullable=False),
    sa.Column('iscoll', npf.NPBoolean(), npd.Comment('Is resource a collection?'), server_default=npf.npbool(False), nullable=False),
    sa.Column('op', npf.DeclEnumType(name='DAVHistoryOp', values=['A', 'M', 'D']), npd.Comment('Operation type'), nullable=False),
    sa.Column('ts', sa.TIMESTAMP(), npd.Comment('Operation timestamp'), server_default=npd.CurrentTimestampDefault(on_update=False), nullable=False),
    sa.Column('uri', sa.Unicode(length=1000), npd.Comment('Resource URI'), nullable=False),
    sa.PrimaryKeyConstraint('dhistid', name=op.f('dav_history_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('dav_history', 'DAV resource modification history')
    op.create_index('dav_history_i_changeid', 'dav_history', ['changeid'], unique=False)
    op.create_index('dav_history_i_collchange', 'dav_history', ['collid', 'changeid'], unique=False)
    op.create_index('dav_history_i_ts', 'dav_history', ['ts'], unique=False)
    op.create_table('logs_actions',
    sa.Column('laid', npf.UInt32(), npd.Comment('Log action ID'), nullable=False, default=sa.Sequence('logs_actions_laid_seq', start=101, increment=1)),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Log action name'), nullable=False),
    sa.PrimaryKeyConstraint('laid', name=op.f('logs_actions_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('logs_actions', 'Log actions')
    op.create_index('logs_actions_u_name', 'logs_actions', ['name'], unique=True)
    op.create_table('logs_types',
    sa.Column('ltid', npf.UInt32(), npd.Comment('Log entry type ID'), nullable=False, default=sa.Sequence('logs_types_ltid_seq', start=101, increment=1)),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Log entry type name'), nullable=False),
    sa.PrimaryKeyConstraint('ltid', name=op.f('logs_types_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('logs_types', 'Log entry types')
    op.create_index('logs_types_u_name', 'logs_types', ['name'], unique=True)
    op.create_table('np_modules',
    sa.Column('npmodid', npf.UInt32(), npd.Comment('NetProfile module ID'), nullable=False, default=sa.Sequence('np_modules_npmodid_seq')),
    sa.Column('name', npf.ASCIIString(length=255), npd.Comment('NetProfile module name'), nullable=False),
    sa.Column('curversion', npf.ASCIIString(length=32), npd.Comment('NetProfile module current version'), server_default='0', nullable=False),
    sa.Column('enabled', npf.NPBoolean(), npd.Comment('Is module enabled?'), server_default=npf.npbool(False), nullable=False),
    sa.PrimaryKeyConstraint('npmodid', name=op.f('np_modules_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('np_modules', 'NetProfile modules')
    op.create_index('np_modules_i_enabled', 'np_modules', ['enabled'], unique=False)
    op.create_index('np_modules_u_name', 'np_modules', ['name'], unique=True)
    op.create_table('np_settings_global',
    sa.Column('npglobid', npf.UInt32(), npd.Comment('Global setting ID'), nullable=False, default=sa.Sequence('np_settings_global_npglobid_seq')),
    sa.Column('name', npf.ASCIIString(length=255), npd.Comment('Global setting name'), nullable=False),
    sa.Column('value', npf.ASCIIString(length=255), npd.Comment('Current value of the setting'), nullable=False),
    sa.PrimaryKeyConstraint('npglobid', name=op.f('np_settings_global_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('np_settings_global', 'NetProfile UI global settings')
    op.create_trigger('netprofile_core', 'np_settings_global', 'after', 'insert', '033d52604eac')
    op.create_trigger('netprofile_core', 'np_settings_global', 'after', 'update', '033d52604eac')
    op.create_trigger('netprofile_core', 'np_settings_global', 'after', 'delete', '033d52604eac')
    op.create_index('np_settings_global_u_name', 'np_settings_global', ['name'], unique=True)
    op.create_table('np_vars',
    sa.Column('varid', npf.UInt32(), npd.Comment('Global variable ID'), nullable=False, default=sa.Sequence('np_vars_varid_seq')),
    sa.Column('name', npf.ASCIIString(length=255), npd.Comment('Global variable name'), nullable=False),
    sa.Column('value_str', npf.ExactUnicode(length=255), npd.Comment('Global variable value - as string'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('value_int', npf.Int64(), npd.Comment('Global variable value - as integer'), server_default=sa.text('NULL'), nullable=True),
    sa.PrimaryKeyConstraint('varid', name=op.f('np_vars_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('np_vars', 'NetProfile global variables')
    op.create_index('np_vars_u_name', 'np_vars', ['name'], unique=True)
    op.create_table('secpol_def',
    sa.Column('secpolid', npf.UInt32(), npd.Comment('Security policy ID'), nullable=False, default=sa.Sequence('secpol_def_secpolid_seq')),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Security policy name'), nullable=False),
    sa.Column('pw_length_min', npf.UInt16(), npd.Comment('Minimum password length'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pw_length_max', npf.UInt16(), npd.Comment('Maximum password length'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pw_ctype_min', npf.UInt8(), npd.Comment('Minimum number of character types in password'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pw_ctype_max', npf.UInt8(), npd.Comment('Maximum number of character types in password'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pw_dict_check', npf.NPBoolean(), npd.Comment('Check password against a dictionary?'), server_default=npf.npbool(False), nullable=False),
    sa.Column('pw_dict_name', npf.ASCIIString(length=255), npd.Comment('Name of a custom dictionary'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pw_hist_check', npf.NPBoolean(), npd.Comment('Keep a history of old passwords?'), server_default=npf.npbool(False), nullable=False),
    sa.Column('pw_hist_size', npf.UInt16(), npd.Comment('Old password history size'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pw_age_min', npf.UInt16(), npd.Comment('Minimum password age in days'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pw_age_max', npf.UInt16(), npd.Comment('Maximum password age in days'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pw_age_warndays', npf.UInt16(), npd.Comment('Notify to change password (in days before expiration)'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pw_age_warnmail', npf.NPBoolean(), npd.Comment('Warn about password expiry by e-mail'), server_default=npf.npbool(False), nullable=False),
    sa.Column('pw_age_action', npf.DeclEnumType(name='SecurityPolicyOnExpire', values=['none', 'force', 'drop']), npd.Comment('Action on expired password'), server_default=sa.text("'none'"), nullable=False),
    sa.Column('net_whitelist', npf.ASCIIString(length=255), npd.Comment('Whitelist of allowed login addresses'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('sess_timeout', npf.UInt32(), npd.Comment('Session timeout (in seconds)'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('sess_window_ipv4', npf.UInt8(), npd.Comment('Allow IPv4 source addresses to migrate within this mask'), server_default=sa.text('32'), nullable=True),
    sa.Column('sess_window_ipv6', npf.UInt8(), npd.Comment('Allow IPv6 source addresses to migrate within this mask'), server_default=sa.text('128'), nullable=True),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Security policy description'), server_default=sa.text('NULL'), nullable=True),
    sa.PrimaryKeyConstraint('secpolid', name=op.f('secpol_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('secpol_def', 'Security policies')
    op.create_index('secpol_def_u_name', 'secpol_def', ['name'], unique=True)
    op.create_table('tags_def',
    sa.Column('tagid', npf.UInt32(), npd.Comment('Tag ID'), nullable=False, default=sa.Sequence('tags_def_tagid_seq')),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Tag name'), nullable=False),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Optional tag description'), server_default=sa.text('NULL'), nullable=True),
    sa.PrimaryKeyConstraint('tagid', name=op.f('tags_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('tags_def', 'Generic tags')
    op.create_index('tags_def_u_name', 'tags_def', ['name'], unique=True)
    op.create_table('tasks_log',
    sa.Column('tasklogid', npf.UInt32(), npd.Comment('Task result ID'), nullable=False, default=sa.Sequence('tasks_log_tasklogid_seq')),
    sa.Column('uuid', npf.UUID(length=16), npd.Comment('Celery task UUID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('state', npf.ASCIIString(length=32), npd.Comment('Current Celery task state'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('proc', npf.ASCIIString(length=255), npd.Comment('Registered Celery task procedure name'), nullable=False),
    sa.Column('args', npf.JSONData(), npd.Comment('Arguments passed to task procedure'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('kwargs', npf.JSONData(), npd.Comment('Keyword arguments passed to task procedure'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('startts', sa.TIMESTAMP(), npd.Comment('Task execution start time'), server_default=npd.CurrentTimestampDefault(on_update=False), nullable=False),
    sa.Column('finishts', sa.TIMESTAMP(), npd.Comment('Task result return time'), nullable=True),
    sa.Column('result', npf.JSONData(), npd.Comment('Value returned by a task'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('traceback', sa.UnicodeText(), npd.Comment('Traceback if exception was encountered'), nullable=True),
    sa.PrimaryKeyConstraint('tasklogid', name=op.f('tasks_log_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('tasks_log', 'Task results for Celery beat')
    op.create_index('tasks_log_i_ts', 'tasks_log', ['startts'], unique=False)
    op.create_index('tasks_log_i_uuid', 'tasks_log', ['uuid'], unique=False)
    op.create_table('tasks_schedules',
    sa.Column('beatschid', npf.UInt32(), npd.Comment('Task schedule ID'), nullable=False, default=sa.Sequence('tasks_schedules_beatschid_seq')),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Task schedule name'), nullable=False),
    sa.Column('type', npf.DeclEnumType(name='TaskScheduleType', values=['int', 'cron']), npd.Comment('Task schedule type'), server_default=sa.text("'int'"), nullable=False),
    sa.Column('int_period', npf.UInt32(), npd.Comment('Interval amount for interval-based schedules'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('int_unit', npf.DeclEnumType(name='TaskIntervalUnit', values=['day', 'hr', 'min', 'sec', 'mcs']), npd.Comment('Interval unit for interval-based schedules'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('cron_min', npf.ASCIIString(length=64), npd.Comment('Minute specification for crontab-based schedules'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('cron_hour', npf.ASCIIString(length=64), npd.Comment('Hour specification for crontab-based schedules'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('cron_wday', npf.ASCIIString(length=64), npd.Comment('Day of the week specification for crontab-based schedules'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('cron_mday', npf.ASCIIString(length=64), npd.Comment('Day of the month specification for crontab-based schedules'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('cron_month', npf.ASCIIString(length=64), npd.Comment('Month specification for crontab-based schedules'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('not_before', sa.TIMESTAMP(), npd.Comment('Do not execute before this time'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('not_after', sa.TIMESTAMP(), npd.Comment('Do not execute after this time'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Task schedule description'), server_default=sa.text('NULL'), nullable=True),
    sa.PrimaryKeyConstraint('beatschid', name=op.f('tasks_schedules_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('tasks_schedules', 'Task schedules for Celery beat')
    op.create_index('tasks_schedules_i_type', 'tasks_schedules', ['type'], unique=False)
    op.create_index('tasks_schedules_u_name', 'tasks_schedules', ['name'], unique=True)
    op.create_table('groups',
    sa.Column('gid', npf.UInt32(), npd.Comment('Group ID'), nullable=False, default=sa.Sequence('groups_gid_seq')),
    sa.Column('parentid', npf.UInt32(), npd.Comment('Parent group ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('secpolid', npf.UInt32(), npd.Comment('Security policy ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Group name'), nullable=False),
    sa.Column('visible', npf.NPBoolean(), npd.Comment('Is visible in UI?'), server_default=npf.npbool(True), nullable=False),
    sa.Column('assignable', npf.NPBoolean(), npd.Comment('Can be assigned tasks?'), server_default=npf.npbool(True), nullable=False),
    sa.Column('rootffid', npf.UInt32(), npd.Comment('Root file folder ID'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['parentid'], ['groups.gid'], name='groups_fk_parentid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['rootffid'], ['files_folders.ffid'], name='groups_fk_rootffid', onupdate='CASCADE', ondelete='SET NULL', use_alter=True),
    sa.ForeignKeyConstraint(['secpolid'], ['secpol_def.secpolid'], name='groups_fk_secpolid', onupdate='CASCADE'),
    sa.PrimaryKeyConstraint('gid', name=op.f('groups_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('groups', 'Groups')
    op.create_trigger('netprofile_core', 'groups', 'after', 'insert', '033d52604eac')
    op.create_trigger('netprofile_core', 'groups', 'after', 'update', '033d52604eac')
    op.create_trigger('netprofile_core', 'groups', 'after', 'delete', '033d52604eac')
    op.create_index('groups_i_parentid', 'groups', ['parentid'], unique=False)
    op.create_index('groups_i_rootffid', 'groups', ['rootffid'], unique=False)
    op.create_index('groups_i_secpolid', 'groups', ['secpolid'], unique=False)
    op.create_index('groups_u_name', 'groups', ['name'], unique=True)
    op.create_table('logs_data',
    sa.Column('logid', npf.UInt64(), npd.Comment('Log entry ID'), nullable=False, default=sa.Sequence('logs_data_logid_seq')),
    sa.Column('ts', sa.TIMESTAMP(), npd.Comment('Log entry timestamp'), server_default=npd.CurrentTimestampDefault(on_update=False), nullable=False),
    sa.Column('login', sa.Unicode(length=48), npd.Comment("Owner's login string"), nullable=False),
    sa.Column('type', npf.UInt32(), npd.Comment('Log entry type'), nullable=False),
    sa.Column('action', npf.UInt32(), npd.Comment('Log entry action'), nullable=False),
    sa.Column('data', sa.UnicodeText(), npd.Comment('Additional data'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['action'], ['logs_actions.laid'], name='logs_data_fk_action', onupdate='CASCADE'),
    sa.ForeignKeyConstraint(['type'], ['logs_types.ltid'], name='logs_data_fk_type', onupdate='CASCADE'),
    sa.PrimaryKeyConstraint('logid', name=op.f('logs_data_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('logs_data', 'Actual system log')
    op.create_table('privileges',
    sa.Column('privid', npf.UInt32(), npd.Comment('Privilege ID'), nullable=False, default=sa.Sequence('privileges_privid_seq')),
    sa.Column('npmodid', npf.UInt32(), npd.Comment('NetProfile module ID'), server_default=sa.text('1'), nullable=False),
    sa.Column('canbeset', npf.NPBoolean(), npd.Comment('Can be set from UI?'), server_default=npf.npbool(True), nullable=False),
    sa.Column('code', npf.ASCIIString(length=48), npd.Comment('Privilege code'), nullable=False),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Privilege name'), nullable=False),
    sa.Column('guestvalue', npf.NPBoolean(), npd.Comment('Value for users not logged in'), server_default=npf.npbool(False), nullable=False),
    sa.Column('hasacls', npf.NPBoolean(), npd.Comment('Can have ACLs?'), server_default=npf.npbool(False), nullable=False),
    sa.Column('resclass', npf.ASCIIString(length=255), npd.Comment('Resource provider class'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['npmodid'], ['np_modules.npmodid'], name='privileges_fk_npmodid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('privid', name=op.f('privileges_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('privileges', 'Privilege definitions')
    op.create_index('privileges_i_canbeset', 'privileges', ['canbeset'], unique=False)
    op.create_index('privileges_i_npmodid', 'privileges', ['npmodid'], unique=False)
    op.create_index('privileges_u_code', 'privileges', ['code'], unique=True)
    op.create_index('privileges_u_name', 'privileges', ['name'], unique=True)
    op.create_table('acls_groups',
    sa.Column('gid', npf.UInt32(), npd.Comment('Group ID'), nullable=False),
    sa.Column('aclid', npf.UInt32(), npd.Comment('ACL ID'), nullable=False, default=sa.Sequence('acls_groups_aclid_seq')),
    sa.Column('privid', npf.UInt32(), npd.Comment('Privilege ID'), nullable=False),
    sa.Column('resource', npf.UInt32(), npd.Comment('Resource ID'), nullable=False),
    sa.Column('value', npf.NPBoolean(), npd.Comment('Access value'), server_default=npf.npbool(True), nullable=False),
    sa.ForeignKeyConstraint(['gid'], ['groups.gid'], name='acls_groups_fk_gid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['privid'], ['privileges.privid'], name='acls_groups_fk_privid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('aclid', name=op.f('acls_groups_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('acls_groups', 'Group access control lists')
    op.create_index('acls_groups_i_priv', 'acls_groups', ['privid'], unique=False)
    op.create_index('acls_groups_u_cap', 'acls_groups', ['gid', 'privid', 'resource'], unique=True)
    op.create_table('capabilities_groups',
    sa.Column('gid', npf.UInt32(), npd.Comment('Group ID'), nullable=False),
    sa.Column('capid', npf.UInt32(), npd.Comment('Capability ID'), nullable=False, default=sa.Sequence('capabilities_groups_capid_seq')),
    sa.Column('privid', npf.UInt32(), npd.Comment('Privilege ID'), nullable=False),
    sa.Column('value', npf.NPBoolean(), npd.Comment('Capability value'), server_default=npf.npbool(True), nullable=False),
    sa.ForeignKeyConstraint(['gid'], ['groups.gid'], name='capabilities_groups_fk_gid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['privid'], ['privileges.privid'], name='capabilities_groups_fk_privid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('capid', name=op.f('capabilities_groups_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('capabilities_groups', 'Group capabilities')
    op.create_index('capabilities_groups_i_priv', 'capabilities_groups', ['privid'], unique=False)
    op.create_index('capabilities_groups_u_cap', 'capabilities_groups', ['gid', 'privid'], unique=True)
    op.create_table('users',
    sa.Column('uid', npf.UInt32(), npd.Comment('User ID'), nullable=False, default=sa.Sequence('users_uid_seq')),
    sa.Column('gid', npf.UInt32(), npd.Comment('Group ID'), nullable=False),
    sa.Column('secpolid', npf.UInt32(), npd.Comment('Security policy ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('state', npf.DeclEnumType(name='UserState', values=['P', 'A', 'D']), npd.Comment('User state'), server_default=sa.text("'P'"), nullable=False),
    sa.Column('login', npf.ExactUnicode(length=48), npd.Comment('Login string'), nullable=False),
    sa.Column('pwd_hashed', npf.ASCIIString(length=255), npd.Comment('Primary storage for hashed password'), nullable=False),
    sa.Column('pwd_digestha1', npf.ASCIIFixedString(length=32), npd.Comment('DIGEST-MD5 A1 hash of user password'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pwd_ntlm', npf.ASCIIFixedString(length=32), npd.Comment('NTLM hash of user password'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pwd_crypt', npf.ExactUnicode(length=255), npd.Comment('POSIX crypt hash of user password'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pwd_plain', npf.ExactUnicode(length=255), npd.Comment('Plaintext user password'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('enabled', npf.NPBoolean(), npd.Comment('Is logging in enabled?'), server_default=npf.npbool(False), nullable=False),
    sa.Column('name_family', sa.Unicode(length=255), npd.Comment('Family name'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('name_given', sa.Unicode(length=255), npd.Comment('Given name'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('name_middle', sa.Unicode(length=255), npd.Comment('Middle name'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('org', sa.Unicode(length=255), npd.Comment('Organization name'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('orgunit', sa.Unicode(length=255), npd.Comment('Organizational unit name'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('title', sa.Unicode(length=255), npd.Comment('Title'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('managerid', npf.UInt32(), npd.Comment('Manager user ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('phfileid', npf.UInt32(), npd.Comment('Photo file ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('User description'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['gid'], ['groups.gid'], name='users_fk_gid', onupdate='CASCADE'),
    sa.ForeignKeyConstraint(['managerid'], ['users.uid'], name='users_fk_managerid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['phfileid'], ['files_def.fileid'], name='users_fk_phfileid', onupdate='CASCADE', ondelete='SET NULL', use_alter=True),
    sa.ForeignKeyConstraint(['secpolid'], ['secpol_def.secpolid'], name='users_fk_secpolid', onupdate='CASCADE'),
    sa.PrimaryKeyConstraint('uid', name=op.f('users_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('users', 'Users')
    op.create_trigger('netprofile_core', 'users', 'after', 'insert', '033d52604eac')
    op.create_trigger('netprofile_core', 'users', 'after', 'update', '033d52604eac')
    op.create_trigger('netprofile_core', 'users', 'after', 'delete', '033d52604eac')
    op.create_index('users_i_enabled', 'users', ['enabled'], unique=False)
    op.create_index('users_i_gid', 'users', ['gid'], unique=False)
    op.create_index('users_i_managerid', 'users', ['managerid'], unique=False)
    op.create_index('users_i_phfileid', 'users', ['phfileid'], unique=False)
    op.create_index('users_i_secpolid', 'users', ['secpolid'], unique=False)
    op.create_index('users_i_state', 'users', ['state'], unique=False)
    op.create_index('users_u_login', 'users', ['login'], unique=True)
    op.create_table('abooks_def',
    sa.Column('abookid', npf.UInt32(), npd.Comment('Address book ID'), nullable=False, default=sa.Sequence('abooks_def_abookid_seq', start=101, increment=1)),
    sa.Column('uid', npf.UInt32(), npd.Comment('User ID'), nullable=False),
    sa.Column('gid', npf.UInt32(), npd.Comment('Group ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('group_access', npf.DeclEnumType(name='CalendarAccess', values=['N', 'RO', 'RW']), npd.Comment('Address book access rule for owner group'), server_default=sa.text("'N'"), nullable=False),
    sa.Column('global_access', npf.DeclEnumType(name='CalendarAccess', values=['N', 'RO', 'RW']), npd.Comment('Address book access rule for everyone not in group'), server_default=sa.text("'N'"), nullable=False),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Address book name'), server_default='Main Address Book', nullable=False),
    sa.Column('synctoken', npf.Int64(), npd.Comment('Sync token for DAV'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Address book description'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('meta', npf.JSONData(), npd.Comment('Serialized meta-data'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['gid'], ['groups.gid'], name='abooks_def_fk_gid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='abooks_def_fk_uid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('abookid', name=op.f('abooks_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('abooks_def', 'User address books')
    op.create_index('abooks_def_i_gid', 'abooks_def', ['gid'], unique=False)
    op.create_index('abooks_def_i_synctoken', 'abooks_def', ['synctoken'], unique=False)
    op.create_index('abooks_def_u_ab', 'abooks_def', ['uid', 'name'], unique=True)
    op.create_table('acls_users',
    sa.Column('uid', npf.UInt32(), npd.Comment('User ID'), nullable=False),
    sa.Column('aclid', npf.UInt32(), npd.Comment('ACL ID'), nullable=False, default=sa.Sequence('acls_users_aclid_seq')),
    sa.Column('privid', npf.UInt32(), npd.Comment('Privilege ID'), nullable=False),
    sa.Column('resource', npf.UInt32(), npd.Comment('Resource ID'), nullable=False),
    sa.Column('value', npf.NPBoolean(), npd.Comment('Access value'), server_default=npf.npbool(True), nullable=False),
    sa.ForeignKeyConstraint(['privid'], ['privileges.privid'], name='acls_users_fk_privid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='acls_users_fk_uid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('aclid', name=op.f('acls_users_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('acls_users', 'User access control lists')
    op.create_index('acls_users_i_priv', 'acls_users', ['privid'], unique=False)
    op.create_index('acls_users_u_cap', 'acls_users', ['uid', 'privid', 'resource'], unique=True)
    op.create_table('calendars_def',
    sa.Column('calid', npf.UInt32(), npd.Comment('Calendar ID'), nullable=False, default=sa.Sequence('calendars_def_calid_seq', start=101, increment=1)),
    sa.Column('uid', npf.UInt32(), npd.Comment('User ID'), nullable=False),
    sa.Column('gid', npf.UInt32(), npd.Comment('Group ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Calendar name'), nullable=False),
    sa.Column('group_access', npf.DeclEnumType(name='CalendarAccess', values=['N', 'RO', 'RW']), npd.Comment('Calendar access rule for owner group'), server_default=sa.text("'N'"), nullable=False),
    sa.Column('global_access', npf.DeclEnumType(name='CalendarAccess', values=['N', 'RO', 'RW']), npd.Comment('Calendar access rule for everyone not in group'), server_default=sa.text("'N'"), nullable=False),
    sa.Column('style', npf.UInt32(), npd.Comment('Calendar style code'), server_default=sa.text('0'), nullable=False),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Calendar description'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['gid'], ['groups.gid'], name='calendars_def_fk_gid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='calendars_def_fk_uid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('calid', name=op.f('calendars_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('calendars_def', 'User calendars')
    op.create_index('calendars_def_i_gid', 'calendars_def', ['gid'], unique=False)
    op.create_index('calendars_def_u_cal', 'calendars_def', ['uid', 'name'], unique=True)
    op.create_table('capabilities_users',
    sa.Column('uid', npf.UInt32(), npd.Comment('User ID'), nullable=False),
    sa.Column('capid', npf.UInt32(), npd.Comment('Capability ID'), nullable=False, default=sa.Sequence('capabilities_users_capid_seq')),
    sa.Column('privid', npf.UInt32(), npd.Comment('Privilege ID'), nullable=False),
    sa.Column('value', npf.NPBoolean(), npd.Comment('Capability value'), server_default=npf.npbool(True), nullable=False),
    sa.ForeignKeyConstraint(['privid'], ['privileges.privid'], name='capabilities_users_fk_privid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='capabilities_users_fk_uid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('capid', name=op.f('capabilities_users_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('capabilities_users', 'User capabilities')
    op.create_index('capabilities_users_i_priv', 'capabilities_users', ['privid'], unique=False)
    op.create_index('capabilities_users_u_cap', 'capabilities_users', ['uid', 'privid'], unique=True)
    op.create_table('datacache',
    sa.Column('dcid', npf.UInt32(), npd.Comment('Data cache ID'), nullable=False, default=sa.Sequence('datacache_dcid_seq')),
    sa.Column('uid', npf.UInt32(), npd.Comment('Data cache owner'), nullable=False),
    sa.Column('dcname', npf.ASCIIString(length=32), npd.Comment('Data cache name'), nullable=False),
    sa.Column('dcvalue', npf.JSONData(), npd.Comment('Data cache value'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='datacache_fk_uid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dcid', name=op.f('datacache_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('datacache', 'Data cache')
    op.create_index('datacache_u_dc', 'datacache', ['uid', 'dcname'], unique=True)
    op.create_table('files_folders',
    sa.Column('ffid', npf.UInt32(), npd.Comment('File folder ID'), nullable=False, default=sa.Sequence('files_folders_ffid_seq')),
    sa.Column('parentid', npf.UInt32(), npd.Comment('Parent folder ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('uid', npf.UInt32(), npd.Comment("Owner's user ID"), server_default=sa.text('NULL'), nullable=True),
    sa.Column('gid', npf.UInt32(), npd.Comment("Owner's group ID"), server_default=sa.text('NULL'), nullable=True),
    sa.Column('synctoken', npf.Int64(), npd.Comment('Sync token for DAV'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('rights', npf.UInt32(), npd.Comment('Rights bitmask'), server_default=sa.text('509'), nullable=False),
    sa.Column('access', npf.DeclEnumType(name='FileFolderAccessRule', values=['private', 'group', 'public']), npd.Comment('Folder access rule'), server_default=sa.text("'public'"), nullable=False),
    sa.Column('ctime', sa.TIMESTAMP(), npd.Comment('Creation timestamp'), server_default=FetchedValue(), nullable=True),
    sa.Column('mtime', sa.TIMESTAMP(), npd.Comment('Last modification timestamp'), server_default=npd.CurrentTimestampDefault(on_update=True), nullable=False),
    sa.Column('name', npf.ExactUnicode(length=255), npd.Comment('Folder name'), nullable=False),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Folder description'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('meta', npf.JSONData(), npd.Comment('Serialized meta-data'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['gid'], ['groups.gid'], name='files_folders_fk_gid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parentid'], ['files_folders.ffid'], name='files_folders_fk_parentid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='files_folders_fk_uid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('ffid', name=op.f('files_folders_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('files_folders', 'File folders')
    op.create_trigger('netprofile_core', 'files_folders', 'before', 'insert', '033d52604eac')
    op.create_trigger('netprofile_core', 'files_folders', 'before', 'update', '033d52604eac')
    op.create_trigger('netprofile_core', 'files_folders', 'after', 'insert', '033d52604eac')
    op.create_trigger('netprofile_core', 'files_folders', 'after', 'update', '033d52604eac')
    op.create_trigger('netprofile_core', 'files_folders', 'after', 'delete', '033d52604eac')
    op.create_index('files_folders_i_gid', 'files_folders', ['gid'], unique=False)
    op.create_index('files_folders_i_synctoken', 'files_folders', ['synctoken'], unique=False)
    op.create_index('files_folders_i_uid', 'files_folders', ['uid'], unique=False)
    op.create_index('files_folders_u_folder', 'files_folders', ['parentid', 'name'], unique=True)
    op.create_table('np_sessions',
    sa.Column('npsid', npf.UInt32(), npd.Comment('NP session ID'), nullable=False, default=sa.Sequence('np_sessions_npsid_seq')),
    sa.Column('sname', npf.ASCIIString(length=255), npd.Comment('NP session hash'), nullable=False),
    sa.Column('uid', npf.UInt32(), npd.Comment('User ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('login', sa.Unicode(length=48), npd.Comment('User login as string'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('startts', sa.TIMESTAMP(), npd.Comment('Start time'), nullable=True),
    sa.Column('lastts', sa.TIMESTAMP(), npd.Comment('Last seen time'), server_default=npd.CurrentTimestampDefault(on_update=True), nullable=True),
    sa.Column('ipaddr', npf.IPv4Address(), npd.Comment('Client IPv4 address'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('ip6addr', npf.IPv6Address(length=16), npd.Comment('Client IPv6 address'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='np_sessions_fk_uid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('npsid', name=op.f('np_sessions_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('np_sessions', 'NetProfile UI sessions')
    op.create_index('np_sessions_i_lastts', 'np_sessions', ['lastts'], unique=False)
    op.create_index('np_sessions_i_sname', 'np_sessions', ['sname'], unique=False)
    op.create_index('np_sessions_i_uid', 'np_sessions', ['uid'], unique=False)
    op.create_table('np_settings_user',
    sa.Column('npusid', npf.UInt32(), npd.Comment('User setting ID'), nullable=False, default=sa.Sequence('np_settings_user_npusid_seq')),
    sa.Column('uid', npf.UInt32(), npd.Comment('User ID'), nullable=False),
    sa.Column('name', npf.ASCIIString(length=255), npd.Comment('User setting name'), nullable=False),
    sa.Column('value', npf.ASCIIString(length=255), npd.Comment('Current value of the setting'), nullable=False),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='np_settings_user_fk_uid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('npusid', name=op.f('np_settings_user_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('np_settings_user', 'NetProfile UI user settings')
    op.create_index('np_settings_user_i_name', 'np_settings_user', ['name'], unique=False)
    op.create_index('np_settings_user_u_us', 'np_settings_user', ['uid', 'name'], unique=True)
    op.create_table('tasks_def',
    sa.Column('taskid', npf.UInt32(), npd.Comment('Task ID'), nullable=False, default=sa.Sequence('tasks_def_taskid_seq')),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Task name'), nullable=False),
    sa.Column('beatschid', npf.UInt32(), npd.Comment('Task schedule ID'), nullable=False),
    sa.Column('enabled', npf.NPBoolean(), npd.Comment('Is task enabled'), server_default=npf.npbool(True), nullable=False),
    sa.Column('log', npf.NPBoolean(), npd.Comment('Is result logging enabled'), server_default=npf.npbool(False), nullable=False),
    sa.Column('proc', npf.ASCIIString(length=255), npd.Comment('Registered Celery task procedure name'), nullable=False),
    sa.Column('args', npf.JSONData(), npd.Comment('Arguments to pass to task procedure'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('kwargs', npf.JSONData(), npd.Comment('Keyword arguments to pass to task procedure'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('queue', npf.ASCIIString(length=255), npd.Comment('Celery message queue'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('exchange', npf.ASCIIString(length=255), npd.Comment('Celery message exchange'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('rkey', npf.ASCIIString(length=255), npd.Comment('Celery message routing key'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('expires', npf.UInt32(), npd.Comment('Task expiration time in seconds'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('rcount', npf.UInt32(), npd.Comment('Total run count'), server_default=sa.text('0'), nullable=False),
    sa.Column('rtime', sa.TIMESTAMP(), npd.Comment('Last run timestamp'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('ctime', sa.TIMESTAMP(), npd.Comment('Creation timestamp'), server_default=FetchedValue(), nullable=True),
    sa.Column('mtime', sa.TIMESTAMP(), npd.Comment('Last modification timestamp'), server_default=npd.CurrentTimestampDefault(on_update=True), nullable=False),
    sa.Column('cby', npf.UInt32(), npd.Comment('Created by'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('mby', npf.UInt32(), npd.Comment('Modified by'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Task description'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['beatschid'], ['tasks_schedules.beatschid'], name='tasks_def_fk_beatschid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['cby'], ['users.uid'], name='tasks_def_fk_cby', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['mby'], ['users.uid'], name='tasks_def_fk_mby', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('taskid', name=op.f('tasks_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('tasks_def', 'Tasks for Celery beat')
    op.create_trigger('netprofile_core', 'tasks_def', 'before', 'insert', '033d52604eac')
    op.create_trigger('netprofile_core', 'tasks_def', 'before', 'update', '033d52604eac')
    op.create_trigger('netprofile_core', 'tasks_def', 'after', 'insert', '033d52604eac')
    op.create_trigger('netprofile_core', 'tasks_def', 'after', 'update', '033d52604eac')
    op.create_trigger('netprofile_core', 'tasks_def', 'after', 'delete', '033d52604eac')
    op.create_index('tasks_def_i_beatschid', 'tasks_def', ['beatschid'], unique=False)
    op.create_index('tasks_def_i_cby', 'tasks_def', ['cby'], unique=False)
    op.create_index('tasks_def_i_mby', 'tasks_def', ['mby'], unique=False)
    op.create_index('tasks_def_i_mtime', 'tasks_def', ['mtime'], unique=False)
    op.create_index('tasks_def_u_name', 'tasks_def', ['name'], unique=True)
    op.create_table('users_comms',
    sa.Column('ucommid', npf.UInt32(), npd.Comment('User communication channel ID'), nullable=False, default=sa.Sequence('users_comms_ucommid_seq')),
    sa.Column('commtid', npf.UInt32(), npd.Comment('Communication channel type ID'), nullable=False),
    sa.Column('uid', npf.UInt32(), npd.Comment('User ID'), nullable=False),
    sa.Column('primary', npf.NPBoolean(), npd.Comment('Primary flag'), server_default=npf.npbool(False), nullable=False),
    sa.Column('scope', npf.DeclEnumType(name='ContactInfoType', values=['home', 'work']), npd.Comment('Channel scope'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('value', sa.Unicode(length=255), npd.Comment('Channel address value'), nullable=False),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Communication channel description'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['commtid'], ['comms_types.commtid'], name='users_comms_fk_commtid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='users_comms_fk_uid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('ucommid', name=op.f('users_comms_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('users_comms', 'User communication channels')
    op.create_index('users_comms_i_commtid', 'users_comms', ['commtid'], unique=False)
    op.create_index('users_comms_i_uid', 'users_comms', ['uid'], unique=False)
    op.create_table('users_email',
    sa.Column('uemailid', npf.UInt32(), npd.Comment('User e-mail ID'), nullable=False, default=sa.Sequence('users_email_uemailid_seq')),
    sa.Column('uid', npf.UInt32(), npd.Comment('User ID'), nullable=False),
    sa.Column('aliasid', npf.UInt32(), npd.Comment('Aliased e-mail ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('primary', npf.NPBoolean(), npd.Comment('Primary flag'), server_default=npf.npbool(False), nullable=False),
    sa.Column('scope', npf.DeclEnumType(name='ContactInfoType', values=['home', 'work']), npd.Comment('Address scope'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('addr', sa.Unicode(length=255), nullable=False),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Address description'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['aliasid'], ['users_email.uemailid'], name='users_email_fk_aliasid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='users_email_fk_uid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uemailid', name=op.f('users_email_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('users_email', 'User e-mail addresses')
    op.create_index('users_email_i_aliasid', 'users_email', ['aliasid'], unique=False)
    op.create_index('users_email_i_uid', 'users_email', ['uid'], unique=False)
    op.create_index('users_email_u_addr', 'users_email', ['addr'], unique=True)
    op.create_table('users_groups',
    sa.Column('ugid', npf.UInt32(), npd.Comment('User group mapping ID'), nullable=False, default=sa.Sequence('users_groups_ugid_seq')),
    sa.Column('uid', npf.UInt32(), npd.Comment('User ID'), nullable=False),
    sa.Column('gid', npf.UInt32(), npd.Comment('Group ID'), nullable=False),
    sa.ForeignKeyConstraint(['gid'], ['groups.gid'], name='users_groups_fk_gid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='users_groups_fk_uid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('ugid', name=op.f('users_groups_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('users_groups', 'Secondary user groups')
    op.create_index('users_groups_i_gid', 'users_groups', ['gid'], unique=False)
    op.create_index('users_groups_u_mapping', 'users_groups', ['uid', 'gid'], unique=True)
    op.create_table('users_phones',
    sa.Column('uphoneid', npf.UInt32(), npd.Comment('User phone ID'), nullable=False, default=sa.Sequence('users_phones_uphoneid_seq')),
    sa.Column('uid', npf.UInt32(), npd.Comment('User ID'), nullable=False),
    sa.Column('primary', npf.NPBoolean(), npd.Comment('Primary flag'), server_default=npf.npbool(False), nullable=False),
    sa.Column('ptype', npf.DeclEnumType(name='PhoneType', values=['home', 'cell', 'work', 'pager', 'fax', 'rec']), npd.Comment('Phone type'), server_default=sa.text("'work'"), nullable=False),
    sa.Column('num', npf.ASCIIString(length=255), npd.Comment('Phone number'), nullable=False),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Phone description'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='users_phones_fk_uid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uphoneid', name=op.f('users_phones_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('users_phones', 'User phone numbers')
    op.create_index('users_phones_i_num', 'users_phones', ['num'], unique=False)
    op.create_index('users_phones_i_uid', 'users_phones', ['uid'], unique=False)
    op.create_table('users_pwhistory',
    sa.Column('pwhid', npf.UInt32(), npd.Comment('Password history entry ID'), nullable=False, default=sa.Sequence('users_pwhistory_pwhid_seq')),
    sa.Column('uid', npf.UInt32(), npd.Comment('User ID'), nullable=False),
    sa.Column('ts', sa.TIMESTAMP(), npd.Comment('Time of change'), server_default=npd.CurrentTimestampDefault(on_update=False), nullable=False),
    sa.Column('pass', npf.ASCIIString(length=255), npd.Comment('Old password'), nullable=False),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='users_pwhistory_fk_uid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('pwhid', name=op.f('users_pwhistory_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('users_pwhistory', "Users' old password history")
    op.create_index('users_pwhistory_i_ts', 'users_pwhistory', ['ts'], unique=False)
    op.create_index('users_pwhistory_i_uid', 'users_pwhistory', ['uid'], unique=False)
    op.create_table('abooks_cards',
    sa.Column('vcardid', npf.UInt32(), npd.Comment('Address book vCard ID'), nullable=False, default=sa.Sequence('abooks_cards_vcardid_seq')),
    sa.Column('abookid', npf.UInt32(), npd.Comment('Address book ID'), nullable=False),
    sa.Column('name', npf.ExactUnicode(length=255), npd.Comment('vCard file name'), nullable=False),
    sa.Column('size', npf.UInt32(), npd.Comment('vCard file size (in bytes)'), nullable=False),
    sa.Column('ctime', sa.TIMESTAMP(), npd.Comment('Creation timestamp'), server_default=FetchedValue(), nullable=True),
    sa.Column('mtime', sa.TIMESTAMP(), npd.Comment('Last modification timestamp'), server_default=npd.CurrentTimestampDefault(on_update=True), nullable=False),
    sa.Column('etag', npf.ASCIIString(length=255), npd.Comment('Generated vCard ETag'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('meta', npf.JSONData(), npd.Comment('Serialized meta-data'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('data', npf.LargeBLOB(), npd.Comment('vCard data'), nullable=False),
    sa.ForeignKeyConstraint(['abookid'], ['abooks_def.abookid'], name='abooks_cards_fk_abookid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('vcardid', name=op.f('abooks_cards_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('abooks_cards', 'User address book vCards')
    op.create_index('abooks_cards_i_gid', 'abooks_cards', ['name'], unique=False)
    op.create_index('abooks_cards_u_card', 'abooks_cards', ['abookid', 'name'], unique=True)
    op.create_table('calendars_events',
    sa.Column('evid', npf.UInt32(), npd.Comment('Event ID'), nullable=False, default=sa.Sequence('calendars_events_evid_seq')),
    sa.Column('calid', npf.UInt32(), npd.Comment('Calendar ID'), nullable=False),
    sa.Column('uid', npf.UInt32(), npd.Comment('User ID'), nullable=False),
    sa.Column('summary', sa.Unicode(length=255), npd.Comment('Event summary'), nullable=False),
    sa.Column('ctime', sa.TIMESTAMP(), npd.Comment('Creation timestamp'), server_default=FetchedValue(), nullable=True),
    sa.Column('mtime', sa.TIMESTAMP(), npd.Comment('Last modification timestamp'), server_default=npd.CurrentTimestampDefault(on_update=True), nullable=False),
    sa.Column('dtstart', sa.TIMESTAMP(), npd.Comment('Event start timestamp'), nullable=True),
    sa.Column('dtend', sa.TIMESTAMP(), npd.Comment('Event end timestamp'), nullable=True),
    sa.Column('allday', npf.NPBoolean(), npd.Comment('Is event all-day?'), server_default=npf.npbool(False), nullable=False),
    sa.Column('icaluid', sa.Unicode(length=255), npd.Comment('iCalendar UID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('loc', sa.Unicode(length=255), npd.Comment('Event location'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('url', sa.Unicode(length=255), npd.Comment('Event-related URL'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('icaldata', sa.LargeBinary(), npd.Comment('Original iCalendar data'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Event description'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['calid'], ['calendars_def.calid'], name='calendars_events_fk_calid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='calendars_events_fk_uid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('evid', name=op.f('calendars_events_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('calendars_events', 'User calendar events')
    op.create_trigger('netprofile_core', 'calendars_events', 'before', 'insert', '033d52604eac')
    op.create_trigger('netprofile_core', 'calendars_events', 'before', 'update', '033d52604eac')
    op.create_index('calendars_events_i_calid', 'calendars_events', ['calid'], unique=False)
    op.create_index('calendars_events_i_dtstart', 'calendars_events', ['dtstart'], unique=False)
    op.create_index('calendars_events_i_icaluid', 'calendars_events', ['icaluid'], unique=False)
    op.create_index('calendars_events_i_uid', 'calendars_events', ['uid'], unique=False)
    op.create_table('calendars_imports',
    sa.Column('calimpid', npf.UInt32(), npd.Comment('Calendar import ID'), nullable=False, default=sa.Sequence('calendars_imports_calimpid_seq')),
    sa.Column('uid', npf.UInt32(), npd.Comment('User ID'), nullable=False),
    sa.Column('calid', npf.UInt32(), npd.Comment('Calendar ID'), nullable=False),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Calendar name'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('style', npf.UInt32(), npd.Comment('Calendar style code'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['calid'], ['calendars_def.calid'], name='calendars_imports_fk_calid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='calendars_imports_fk_uid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('calimpid', name=op.f('calendars_imports_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('calendars_imports', 'User calendar imports')
    op.create_index('calendars_imports_i_calid', 'calendars_imports', ['calid'], unique=False)
    op.create_index('calendars_imports_u_import', 'calendars_imports', ['uid', 'calid'], unique=True)
    op.create_table('files_def',
    sa.Column('fileid', npf.UInt32(), npd.Comment('File ID'), nullable=False, default=sa.Sequence('files_def_fileid_seq')),
    sa.Column('ffid', npf.UInt32(), npd.Comment('Parent folder ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('fname', npf.ExactUnicode(length=255), npd.Comment('File name'), nullable=False),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Human-readable file name'), nullable=False),
    sa.Column('uid', npf.UInt32(), npd.Comment("Owner's user ID"), server_default=sa.text('NULL'), nullable=True),
    sa.Column('gid', npf.UInt32(), npd.Comment("Owner's group ID"), server_default=sa.text('NULL'), nullable=True),
    sa.Column('rights', npf.UInt32(), npd.Comment('Rights bitmask'), server_default=sa.text('436'), nullable=False),
    sa.Column('mime', npf.ASCIIString(length=255), npd.Comment('MIME type of the file'), server_default='application/octet-stream', nullable=False),
    sa.Column('size', npf.UInt32(), npd.Comment('File size (in bytes)'), nullable=False),
    sa.Column('ctime', sa.TIMESTAMP(), npd.Comment('Creation timestamp'), server_default=FetchedValue(), nullable=True),
    sa.Column('mtime', sa.TIMESTAMP(), npd.Comment('Last modification timestamp'), server_default=npd.CurrentTimestampDefault(on_update=True), nullable=False),
    sa.Column('etag', npf.ASCIIString(length=255), npd.Comment('Generated file ETag'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('rcount', npf.UInt32(), npd.Comment('Current read count'), server_default=sa.text('0'), nullable=False),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('File description'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('meta', npf.JSONData(), npd.Comment('Serialized meta-data'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('data', npf.LargeBLOB(), npd.Comment('Actual file data'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['ffid'], ['files_folders.ffid'], name='files_def_fk_ffid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['gid'], ['groups.gid'], name='files_def_fk_gid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='files_def_fk_uid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('fileid', name=op.f('files_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('files_def', 'Stored files')
    op.create_trigger('netprofile_core', 'files_def', 'before', 'insert', '033d52604eac')
    op.create_trigger('netprofile_core', 'files_def', 'before', 'update', '033d52604eac')
    op.create_trigger('netprofile_core', 'files_def', 'after', 'insert', '033d52604eac')
    op.create_trigger('netprofile_core', 'files_def', 'after', 'update', '033d52604eac')
    op.create_trigger('netprofile_core', 'files_def', 'after', 'delete', '033d52604eac')
    op.create_index('files_def_i_ffid', 'files_def', ['ffid'], unique=False)
    op.create_index('files_def_i_gid', 'files_def', ['gid'], unique=False)
    op.create_index('files_def_i_uid', 'files_def', ['uid'], unique=False)
    op.create_index('files_def_u_file', 'files_def', ['ffid', 'fname'], unique=True)
    op.create_table('dav_locks',
    sa.Column('dlid', npf.UInt32(), npd.Comment('DAV lock ID'), nullable=False, default=sa.Sequence('dav_locks_dlid_seq')),
    sa.Column('uid', npf.UInt32(), npd.Comment("Owner's user ID"), server_default=sa.text('NULL'), nullable=True),
    sa.Column('fileid', npf.UInt32(), npd.Comment('Linked file ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('timeout', sa.TIMESTAMP(), npd.Comment('Lock timeout'), nullable=True),
    sa.Column('ctime', sa.TIMESTAMP(), npd.Comment('Creation timestamp'), server_default=FetchedValue(), nullable=True),
    sa.Column('token', sa.Unicode(length=100), npd.Comment('Lock token'), nullable=False),
    sa.Column('owner', sa.Unicode(length=100), npd.Comment('Lock owner'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('scope', npf.Int8(), npd.Comment('Lock scope'), server_default=sa.text('0'), nullable=False),
    sa.Column('depth', npf.Int8(), npd.Comment('Lock depth'), server_default=sa.text('0'), nullable=False),
    sa.Column('uri', sa.Unicode(length=1000), npd.Comment('Lock URI'), nullable=False),
    sa.ForeignKeyConstraint(['fileid'], ['files_def.fileid'], name='dav_locks_fk_fileid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='dav_locks_fk_uid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dlid', name=op.f('dav_locks_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('dav_locks', 'DAV locks')
    op.create_index('dav_locks_i_fileid', 'dav_locks', ['fileid'], unique=False)
    op.create_index('dav_locks_i_timeout', 'dav_locks', ['timeout'], unique=False)
    op.create_index('dav_locks_i_token', 'dav_locks', ['token'], unique=False)
    op.create_index('dav_locks_i_uid', 'dav_locks', ['uid'], unique=False)
    op.create_index('dav_locks_i_uri', 'dav_locks', ['uri'], unique=False, mysql_length=255)
    op.create_table('files_chunks',
    sa.Column('fileid', npf.UInt32(), npd.Comment('File ID'), nullable=False),
    sa.Column('offset', npf.UInt32(), npd.Comment('File chunk offset'), server_default=sa.text('0'), nullable=False),
    sa.Column('data', npf.LargeBLOB(), npd.Comment('File chunk data'), nullable=False),
    sa.ForeignKeyConstraint(['fileid'], ['files_def.fileid'], name='files_chunks_fk_fileid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('fileid', 'offset', name=op.f('files_chunks_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('files_chunks', 'Stored file chunks')
    op.create_function('core', npd.SQLFunction('hwaddr_hex_i', args=[npd.SQLFunctionArgument('hwbin', sa.BINARY(length=6), None)], returns=sa.Unicode(length=15), comment='Convert binary hardware address to IEEE-style string', reads_sql=False, writes_sql=False, is_procedure=False, label=None), '033d52604eac')
    op.create_function('core', npd.SQLFunction('hwaddr_unhex', args=[npd.SQLFunctionArgument('hwstr', sa.Unicode(length=255), None)], returns=sa.BINARY(length=6), comment='Convert various hardware address formats to binary', reads_sql=False, writes_sql=False, is_procedure=False, label=None), '033d52604eac')
    op.create_function('core', npd.SQLFunction('hwaddr_hex_w', args=[npd.SQLFunctionArgument('hwbin', sa.BINARY(length=6), None)], returns=sa.Unicode(length=18), comment='Convert binary hardware address to Windows-style string', reads_sql=False, writes_sql=False, is_procedure=False, label=None), '033d52604eac')
    op.create_function('core', npd.SQLFunction('hwaddr_hex_l', args=[npd.SQLFunctionArgument('hwbin', sa.BINARY(length=6), None)], returns=sa.Unicode(length=18), comment='Convert binary hardware address to Linux-style string', reads_sql=False, writes_sql=False, is_procedure=False, label=None), '033d52604eac')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_function('core', npd.SQLFunction('hwaddr_hex_l', args=[npd.SQLFunctionArgument('hwbin', sa.BINARY(length=6), None)], returns=sa.Unicode(length=18), comment='Convert binary hardware address to Linux-style string', reads_sql=False, writes_sql=False, is_procedure=False, label=None), '033d52604eac')
    op.drop_function('core', npd.SQLFunction('hwaddr_hex_w', args=[npd.SQLFunctionArgument('hwbin', sa.BINARY(length=6), None)], returns=sa.Unicode(length=18), comment='Convert binary hardware address to Windows-style string', reads_sql=False, writes_sql=False, is_procedure=False, label=None), '033d52604eac')
    op.drop_function('core', npd.SQLFunction('hwaddr_unhex', args=[npd.SQLFunctionArgument('hwstr', sa.Unicode(length=255), None)], returns=sa.BINARY(length=6), comment='Convert various hardware address formats to binary', reads_sql=False, writes_sql=False, is_procedure=False, label=None), '033d52604eac')
    op.drop_function('core', npd.SQLFunction('hwaddr_hex_i', args=[npd.SQLFunctionArgument('hwbin', sa.BINARY(length=6), None)], returns=sa.Unicode(length=15), comment='Convert binary hardware address to IEEE-style string', reads_sql=False, writes_sql=False, is_procedure=False, label=None), '033d52604eac')
    op.drop_table('files_chunks')
    op.drop_index('dav_locks_i_uri', table_name='dav_locks')
    op.drop_index('dav_locks_i_uid', table_name='dav_locks')
    op.drop_index('dav_locks_i_token', table_name='dav_locks')
    op.drop_index('dav_locks_i_timeout', table_name='dav_locks')
    op.drop_index('dav_locks_i_fileid', table_name='dav_locks')
    op.drop_table('dav_locks')
    op.drop_index('files_def_u_file', table_name='files_def')
    op.drop_index('files_def_i_uid', table_name='files_def')
    op.drop_index('files_def_i_gid', table_name='files_def')
    op.drop_index('files_def_i_ffid', table_name='files_def')
    op.drop_table('files_def')
    op.drop_index('calendars_imports_u_import', table_name='calendars_imports')
    op.drop_index('calendars_imports_i_calid', table_name='calendars_imports')
    op.drop_table('calendars_imports')
    op.drop_index('calendars_events_i_uid', table_name='calendars_events')
    op.drop_index('calendars_events_i_icaluid', table_name='calendars_events')
    op.drop_index('calendars_events_i_dtstart', table_name='calendars_events')
    op.drop_index('calendars_events_i_calid', table_name='calendars_events')
    op.drop_table('calendars_events')
    op.drop_index('abooks_cards_u_card', table_name='abooks_cards')
    op.drop_index('abooks_cards_i_gid', table_name='abooks_cards')
    op.drop_table('abooks_cards')
    op.drop_index('users_pwhistory_i_uid', table_name='users_pwhistory')
    op.drop_index('users_pwhistory_i_ts', table_name='users_pwhistory')
    op.drop_table('users_pwhistory')
    op.drop_index('users_phones_i_uid', table_name='users_phones')
    op.drop_index('users_phones_i_num', table_name='users_phones')
    op.drop_table('users_phones')
    op.drop_index('users_groups_u_mapping', table_name='users_groups')
    op.drop_index('users_groups_i_gid', table_name='users_groups')
    op.drop_table('users_groups')
    op.drop_index('users_email_u_addr', table_name='users_email')
    op.drop_index('users_email_i_uid', table_name='users_email')
    op.drop_index('users_email_i_aliasid', table_name='users_email')
    op.drop_table('users_email')
    op.drop_index('users_comms_i_uid', table_name='users_comms')
    op.drop_index('users_comms_i_commtid', table_name='users_comms')
    op.drop_table('users_comms')
    op.drop_index('tasks_def_u_name', table_name='tasks_def')
    op.drop_index('tasks_def_i_mtime', table_name='tasks_def')
    op.drop_index('tasks_def_i_mby', table_name='tasks_def')
    op.drop_index('tasks_def_i_cby', table_name='tasks_def')
    op.drop_index('tasks_def_i_beatschid', table_name='tasks_def')
    op.drop_table('tasks_def')
    op.drop_index('np_settings_user_u_us', table_name='np_settings_user')
    op.drop_index('np_settings_user_i_name', table_name='np_settings_user')
    op.drop_table('np_settings_user')
    op.drop_index('np_sessions_i_uid', table_name='np_sessions')
    op.drop_index('np_sessions_i_sname', table_name='np_sessions')
    op.drop_index('np_sessions_i_lastts', table_name='np_sessions')
    op.drop_table('np_sessions')
    op.drop_index('files_folders_u_folder', table_name='files_folders')
    op.drop_index('files_folders_i_uid', table_name='files_folders')
    op.drop_index('files_folders_i_synctoken', table_name='files_folders')
    op.drop_index('files_folders_i_gid', table_name='files_folders')
    op.drop_table('files_folders')
    op.drop_index('datacache_u_dc', table_name='datacache')
    op.drop_table('datacache')
    op.drop_index('capabilities_users_u_cap', table_name='capabilities_users')
    op.drop_index('capabilities_users_i_priv', table_name='capabilities_users')
    op.drop_table('capabilities_users')
    op.drop_index('calendars_def_u_cal', table_name='calendars_def')
    op.drop_index('calendars_def_i_gid', table_name='calendars_def')
    op.drop_table('calendars_def')
    op.drop_index('acls_users_u_cap', table_name='acls_users')
    op.drop_index('acls_users_i_priv', table_name='acls_users')
    op.drop_table('acls_users')
    op.drop_index('abooks_def_u_ab', table_name='abooks_def')
    op.drop_index('abooks_def_i_synctoken', table_name='abooks_def')
    op.drop_index('abooks_def_i_gid', table_name='abooks_def')
    op.drop_table('abooks_def')
    op.drop_index('users_u_login', table_name='users')
    op.drop_index('users_i_state', table_name='users')
    op.drop_index('users_i_secpolid', table_name='users')
    op.drop_index('users_i_phfileid', table_name='users')
    op.drop_index('users_i_managerid', table_name='users')
    op.drop_index('users_i_gid', table_name='users')
    op.drop_index('users_i_enabled', table_name='users')
    op.drop_table('users')
    op.drop_index('capabilities_groups_u_cap', table_name='capabilities_groups')
    op.drop_index('capabilities_groups_i_priv', table_name='capabilities_groups')
    op.drop_table('capabilities_groups')
    op.drop_index('acls_groups_u_cap', table_name='acls_groups')
    op.drop_index('acls_groups_i_priv', table_name='acls_groups')
    op.drop_table('acls_groups')
    op.drop_index('privileges_u_name', table_name='privileges')
    op.drop_index('privileges_u_code', table_name='privileges')
    op.drop_index('privileges_i_npmodid', table_name='privileges')
    op.drop_index('privileges_i_canbeset', table_name='privileges')
    op.drop_table('privileges')
    op.drop_table('logs_data')
    op.drop_index('groups_u_name', table_name='groups')
    op.drop_index('groups_i_secpolid', table_name='groups')
    op.drop_index('groups_i_rootffid', table_name='groups')
    op.drop_index('groups_i_parentid', table_name='groups')
    op.drop_table('groups')
    op.drop_index('tasks_schedules_u_name', table_name='tasks_schedules')
    op.drop_index('tasks_schedules_i_type', table_name='tasks_schedules')
    op.drop_table('tasks_schedules')
    op.drop_index('tasks_log_i_uuid', table_name='tasks_log')
    op.drop_index('tasks_log_i_ts', table_name='tasks_log')
    op.drop_table('tasks_log')
    op.drop_index('tags_def_u_name', table_name='tags_def')
    op.drop_table('tags_def')
    op.drop_index('secpol_def_u_name', table_name='secpol_def')
    op.drop_table('secpol_def')
    op.drop_index('np_vars_u_name', table_name='np_vars')
    op.drop_table('np_vars')
    op.drop_index('np_settings_global_u_name', table_name='np_settings_global')
    op.drop_table('np_settings_global')
    op.drop_index('np_modules_u_name', table_name='np_modules')
    op.drop_index('np_modules_i_enabled', table_name='np_modules')
    op.drop_table('np_modules')
    op.drop_index('logs_types_u_name', table_name='logs_types')
    op.drop_table('logs_types')
    op.drop_index('logs_actions_u_name', table_name='logs_actions')
    op.drop_table('logs_actions')
    op.drop_index('dav_history_i_ts', table_name='dav_history')
    op.drop_index('dav_history_i_collchange', table_name='dav_history')
    op.drop_index('dav_history_i_changeid', table_name='dav_history')
    op.drop_table('dav_history')
    op.drop_index('comms_types_u_name', table_name='comms_types')
    op.drop_index('comms_types_i_impp', table_name='comms_types')
    op.drop_table('comms_types')
    # ### end Alembic commands ###

