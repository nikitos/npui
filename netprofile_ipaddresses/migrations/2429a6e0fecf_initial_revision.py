"""Initial revision

Revision ID: 2429a6e0fecf
Revises: 
Create Date: 2017-09-25 15:37:11.075885

"""

# revision identifiers, used by Alembic.
revision = '2429a6e0fecf'
down_revision = None
branch_labels = ('ipaddresses',)
depends_on = ['21e3f826ac55', '7ec1022dcbee']

from alembic import op
import sqlalchemy as sa
from sqlalchemy import FetchedValue
from netprofile.db import ddl as npd
from netprofile.db import fields as npf

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('revzone_serials',
    sa.Column('rsid', npf.UInt32(), npd.Comment('IPv4 reverse zone serial ID'), nullable=False, default=sa.Sequence('revzone_serials_rsid_seq')),
    sa.Column('ipaddr', npf.IPv4Address(), npd.Comment('IPv4 reverse zone address'), nullable=False),
    sa.Column('date', sa.Date(), npd.Comment('IPv4 reverse zone serial date'), nullable=False),
    sa.Column('rev', npf.UInt8(), npd.Comment('IPv4 reverse zone serial revision'), server_default=sa.text('1'), nullable=False),
    sa.PrimaryKeyConstraint('rsid', name=op.f('revzone_serials_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('revzone_serials', 'IPv4 reverse zone DNS serial numbers')
    op.create_index('revzone_serials_u_ipaddr', 'revzone_serials', ['ipaddr'], unique=True)
    op.create_table('revzone_serials6',
    sa.Column('rsid', npf.UInt32(), npd.Comment('IPv6 reverse zone serial ID'), nullable=False, default=sa.Sequence('revzone_serials6_rsid_seq')),
    sa.Column('ip6addr', npf.IPv6Address(length=16), npd.Comment('IPv6 reverse zone address'), nullable=False),
    sa.Column('date', sa.Date(), npd.Comment('IPv6 reverse zone serial date'), nullable=False),
    sa.Column('rev', npf.UInt8(), npd.Comment('IPv6 reverse zone serial revision'), server_default=sa.text('1'), nullable=False),
    sa.PrimaryKeyConstraint('rsid', name=op.f('revzone_serials6_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('revzone_serials6', 'IPv6 reverse zone DNS serial numbers')
    op.create_index('revzone_serials6_u_ip6addr', 'revzone_serials6', ['ip6addr'], unique=True)
    op.create_table('ip6addr_def',
    sa.Column('ip6addrid', npf.UInt64(), npd.Comment('IPv6 address ID'), nullable=False, default=sa.Sequence('ip6addr_def_ip6addrid_seq')),
    sa.Column('hostid', npf.UInt32(), npd.Comment('Host ID'), nullable=False),
    sa.Column('poolid', npf.UInt32(), npd.Comment('IP address pool ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('netid', npf.UInt32(), npd.Comment('Network ID'), nullable=False),
    sa.Column('offset', npf.IPv6Offset(precision=39, scale=0), npd.Comment('Offset from network start'), nullable=False),
    sa.Column('hwaddr', npf.MACAddress(length=6), npd.Comment('Hardware address'), nullable=False),
    sa.Column('ttl', npf.UInt32(), npd.Comment('RR time to live'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('vis', npf.DeclEnumType(name='ObjectVisibility', values=['B', 'I', 'E']), npd.Comment('IPv6 address visibility'), server_default=sa.text("'B'"), nullable=False),
    sa.Column('owned', npf.NPBoolean(), npd.Comment('Is statically assigned?'), server_default=npf.npbool(False), nullable=False),
    sa.Column('inuse', npf.NPBoolean(), npd.Comment('Is this IPv6 address in use?'), server_default=npf.npbool(False), nullable=False),
    sa.ForeignKeyConstraint(['hostid'], ['hosts_def.hostid'], name='ip6addr_def_fk_hostid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['netid'], ['nets_def.netid'], name='ip6addr_def_fk_netid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['poolid'], ['ippool_def.poolid'], name='ip6addr_def_fk_poolid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('ip6addrid', name=op.f('ip6addr_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('ip6addr_def', 'IPv6 addresses')
    op.create_trigger('netprofile_ipaddresses', 'ip6addr_def', 'before', 'insert', '2429a6e0fecf')
    op.create_trigger('netprofile_ipaddresses', 'ip6addr_def', 'before', 'update', '2429a6e0fecf')
    op.create_trigger('netprofile_ipaddresses', 'ip6addr_def', 'after', 'insert', '2429a6e0fecf')
    op.create_trigger('netprofile_ipaddresses', 'ip6addr_def', 'after', 'update', '2429a6e0fecf')
    op.create_trigger('netprofile_ipaddresses', 'ip6addr_def', 'after', 'delete', '2429a6e0fecf')
    op.create_index('ip6addr_def_i_hostid', 'ip6addr_def', ['hostid'], unique=False)
    op.create_index('ip6addr_def_i_inuse', 'ip6addr_def', ['inuse'], unique=False)
    op.create_index('ip6addr_def_i_poolid', 'ip6addr_def', ['poolid'], unique=False)
    op.create_index('ip6addr_def_u_address', 'ip6addr_def', ['netid', 'offset'], unique=True)
    op.create_table('ipaddr_def',
    sa.Column('ipaddrid', npf.UInt32(), npd.Comment('IPv4 address ID'), nullable=False, default=sa.Sequence('ipaddr_def_ipaddrid_seq')),
    sa.Column('hostid', npf.UInt32(), npd.Comment('Host ID'), nullable=False),
    sa.Column('poolid', npf.UInt32(), npd.Comment('IP address pool ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('netid', npf.UInt32(), npd.Comment('Network ID'), nullable=False),
    sa.Column('offset', npf.UInt32(), npd.Comment('Offset from network start'), nullable=False),
    sa.Column('hwaddr', npf.MACAddress(length=6), npd.Comment('Hardware address'), nullable=False),
    sa.Column('ttl', npf.UInt32(), npd.Comment('RR time to live'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('vis', npf.DeclEnumType(name='ObjectVisibility', values=['B', 'I', 'E']), npd.Comment('IPv4 address visibility'), server_default=sa.text("'B'"), nullable=False),
    sa.Column('owned', npf.NPBoolean(), npd.Comment('Is statically assigned?'), server_default=npf.npbool(False), nullable=False),
    sa.Column('inuse', npf.NPBoolean(), npd.Comment('Is this IPv4 address in use?'), server_default=npf.npbool(False), nullable=False),
    sa.ForeignKeyConstraint(['hostid'], ['hosts_def.hostid'], name='ipaddr_def_fk_hostid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['netid'], ['nets_def.netid'], name='ipaddr_def_fk_netid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['poolid'], ['ippool_def.poolid'], name='ipaddr_def_fk_poolid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('ipaddrid', name=op.f('ipaddr_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('ipaddr_def', 'IPv4 addresses')
    op.create_trigger('netprofile_ipaddresses', 'ipaddr_def', 'before', 'insert', '2429a6e0fecf')
    op.create_trigger('netprofile_ipaddresses', 'ipaddr_def', 'before', 'update', '2429a6e0fecf')
    op.create_trigger('netprofile_ipaddresses', 'ipaddr_def', 'after', 'insert', '2429a6e0fecf')
    op.create_trigger('netprofile_ipaddresses', 'ipaddr_def', 'after', 'update', '2429a6e0fecf')
    op.create_trigger('netprofile_ipaddresses', 'ipaddr_def', 'after', 'delete', '2429a6e0fecf')
    op.create_index('ipaddr_def_i_hostid', 'ipaddr_def', ['hostid'], unique=False)
    op.create_index('ipaddr_def_i_inuse', 'ipaddr_def', ['inuse'], unique=False)
    op.create_index('ipaddr_def_i_poolid', 'ipaddr_def', ['poolid'], unique=False)
    op.create_index('ipaddr_def_u_address', 'ipaddr_def', ['netid', 'offset'], unique=True)
    op.create_function('ipaddresses', npd.SQLFunction('ipaddr_get_offset_hg', args=[npd.SQLFunctionArgument('net', npf.UInt32(), None), npd.SQLFunctionArgument('hg', npf.UInt32(), None)], returns=npf.UInt32(), comment='Get IPv4 offset for a new host (limits version)', reads_sql=True, writes_sql=False, is_procedure=False, label=None), '2429a6e0fecf')
    op.create_function('ipaddresses', npd.SQLFunction('ip6addr_get_offset_hg', args=[npd.SQLFunctionArgument('net', npf.UInt32(), None), npd.SQLFunctionArgument('hg', npf.UInt32(), None)], returns=npf.IPv6Offset(precision=39, scale=0), comment='Get IPv6 offset for a new host (limits version)', reads_sql=True, writes_sql=False, is_procedure=False, label=None), '2429a6e0fecf')
    op.create_function('ipaddresses', npd.SQLFunction('ipaddr_get_dotstr', args=[npd.SQLFunctionArgument('ip', npf.UInt32(), None)], returns=sa.Unicode(length=15), comment='Get dotted-decimal format string of IPv4 address ID', reads_sql=True, writes_sql=False, is_procedure=False, label=None), '2429a6e0fecf')
    op.create_function('ipaddresses', npd.SQLFunction('ipaddr_get_offset_gen', args=[npd.SQLFunctionArgument('net', npf.UInt32(), None)], returns=npf.UInt32(), comment='Get IPv4 offset for a new host (generic version)', reads_sql=True, writes_sql=False, is_procedure=False, label=None), '2429a6e0fecf')
    op.create_function('ipaddresses', npd.SQLFunction('ip6addr_get_offset_gen', args=[npd.SQLFunctionArgument('net', npf.UInt32(), None)], returns=npf.IPv6Offset(precision=39, scale=0), comment='Get IPv6 offset for a new host (generic version)', reads_sql=True, writes_sql=False, is_procedure=False, label=None), '2429a6e0fecf')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_function('ipaddresses', npd.SQLFunction('ip6addr_get_offset_gen', args=[npd.SQLFunctionArgument('net', npf.UInt32(), None)], returns=npf.IPv6Offset(precision=39, scale=0), comment='Get IPv6 offset for a new host (generic version)', reads_sql=True, writes_sql=False, is_procedure=False, label=None), '2429a6e0fecf')
    op.drop_function('ipaddresses', npd.SQLFunction('ipaddr_get_offset_gen', args=[npd.SQLFunctionArgument('net', npf.UInt32(), None)], returns=npf.UInt32(), comment='Get IPv4 offset for a new host (generic version)', reads_sql=True, writes_sql=False, is_procedure=False, label=None), '2429a6e0fecf')
    op.drop_function('ipaddresses', npd.SQLFunction('ipaddr_get_dotstr', args=[npd.SQLFunctionArgument('ip', npf.UInt32(), None)], returns=sa.Unicode(length=15), comment='Get dotted-decimal format string of IPv4 address ID', reads_sql=True, writes_sql=False, is_procedure=False, label=None), '2429a6e0fecf')
    op.drop_function('ipaddresses', npd.SQLFunction('ip6addr_get_offset_hg', args=[npd.SQLFunctionArgument('net', npf.UInt32(), None), npd.SQLFunctionArgument('hg', npf.UInt32(), None)], returns=npf.IPv6Offset(precision=39, scale=0), comment='Get IPv6 offset for a new host (limits version)', reads_sql=True, writes_sql=False, is_procedure=False, label=None), '2429a6e0fecf')
    op.drop_function('ipaddresses', npd.SQLFunction('ipaddr_get_offset_hg', args=[npd.SQLFunctionArgument('net', npf.UInt32(), None), npd.SQLFunctionArgument('hg', npf.UInt32(), None)], returns=npf.UInt32(), comment='Get IPv4 offset for a new host (limits version)', reads_sql=True, writes_sql=False, is_procedure=False, label=None), '2429a6e0fecf')
    op.drop_index('ipaddr_def_u_address', table_name='ipaddr_def')
    op.drop_index('ipaddr_def_i_poolid', table_name='ipaddr_def')
    op.drop_index('ipaddr_def_i_inuse', table_name='ipaddr_def')
    op.drop_index('ipaddr_def_i_hostid', table_name='ipaddr_def')
    op.drop_table('ipaddr_def')
    op.drop_index('ip6addr_def_u_address', table_name='ip6addr_def')
    op.drop_index('ip6addr_def_i_poolid', table_name='ip6addr_def')
    op.drop_index('ip6addr_def_i_inuse', table_name='ip6addr_def')
    op.drop_index('ip6addr_def_i_hostid', table_name='ip6addr_def')
    op.drop_table('ip6addr_def')
    op.drop_index('revzone_serials6_u_ip6addr', table_name='revzone_serials6')
    op.drop_table('revzone_serials6')
    op.drop_index('revzone_serials_u_ipaddr', table_name='revzone_serials')
    op.drop_table('revzone_serials')
    # ### end Alembic commands ###

