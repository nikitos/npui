"""Initial revision

Revision ID: e27d4c93c89d
Revises: 
Create Date: 2017-09-25 14:38:54.030656

"""

# revision identifiers, used by Alembic.
revision = 'e27d4c93c89d'
down_revision = None
branch_labels = ('rates',)
depends_on = ['7ec1022dcbee', '16be1c0cddd0']

from alembic import op
import sqlalchemy as sa
from sqlalchemy import FetchedValue
from netprofile.db import ddl as npd
from netprofile.db import fields as npf

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bperiods_def',
    sa.Column('bperiodid', npf.UInt32(), npd.Comment('Billing period ID'), nullable=False, default=sa.Sequence('bperiods_def_bperiodid_seq')),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Billing period name'), nullable=False),
    sa.Column('start_month', npf.UInt8(), npd.Comment('Start month'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('start_mday', npf.UInt8(), npd.Comment('Start day of month'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('start_wday', npf.UInt8(), npd.Comment('Start day of week'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('start_hour', npf.UInt8(), npd.Comment('Start hour'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('start_minute', npf.UInt8(), npd.Comment('Start minute'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('end_month', npf.UInt8(), npd.Comment('End month'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('end_mday', npf.UInt8(), npd.Comment('End day of month'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('end_wday', npf.UInt8(), npd.Comment('End day of week'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('end_hour', npf.UInt8(), npd.Comment('End hour'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('end_minute', npf.UInt8(), npd.Comment('End minute'), server_default=sa.text('NULL'), nullable=True),
    sa.PrimaryKeyConstraint('bperiodid', name=op.f('bperiods_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('bperiods_def', 'Billing periods')
    op.create_index('bperiods_def_i_hour', 'bperiods_def', ['start_hour', 'end_hour'], unique=False)
    op.create_index('bperiods_def_i_mday', 'bperiods_def', ['start_mday', 'end_mday'], unique=False)
    op.create_index('bperiods_def_i_minute', 'bperiods_def', ['start_minute', 'end_minute'], unique=False)
    op.create_index('bperiods_def_i_month', 'bperiods_def', ['start_month', 'end_month'], unique=False)
    op.create_index('bperiods_def_i_wday', 'bperiods_def', ['start_wday', 'end_wday'], unique=False)
    op.create_index('bperiods_def_u_name', 'bperiods_def', ['name'], unique=True)
    op.create_table('dest_sets',
    sa.Column('dsid', npf.UInt32(), npd.Comment('Destination set ID'), nullable=False, default=sa.Sequence('dest_sets_dsid_seq')),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Destination set name'), nullable=False),
    sa.PrimaryKeyConstraint('dsid', name=op.f('dest_sets_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('dest_sets', 'Accounting destination sets')
    op.create_index('dest_sets_u_name', 'dest_sets', ['name'], unique=True)
    op.create_table('filters_sets',
    sa.Column('fsid', npf.UInt32(), npd.Comment('Filter set ID'), nullable=False, default=sa.Sequence('filters_sets_fsid_seq')),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Filter set name'), nullable=False),
    sa.PrimaryKeyConstraint('fsid', name=op.f('filters_sets_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('filters_sets', 'Accounting filter sets')
    op.create_index('filters_sets_u_name', 'filters_sets', ['name'], unique=True)
    op.create_table('rates_classes_def',
    sa.Column('rcid', npf.UInt32(), npd.Comment('Rate class ID'), nullable=False, default=sa.Sequence('rates_classes_def_rcid_seq')),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Rate class name'), nullable=False),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Rate class description'), server_default=sa.text('NULL'), nullable=True),
    sa.PrimaryKeyConstraint('rcid', name=op.f('rates_classes_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('rates_classes_def', 'Rate classes')
    op.create_index('rates_classes_def_u_name', 'rates_classes_def', ['name'], unique=True)
    op.create_table('dest_def',
    sa.Column('destid', npf.UInt32(), npd.Comment('Destination ID'), nullable=False, default=sa.Sequence('dest_def_destid_seq')),
    sa.Column('type', npf.DeclEnumType(name='DestinationType', values=['normal', 'noquota', 'onlyquota', 'reject']), npd.Comment('Destination type'), server_default=sa.text("'normal'"), nullable=False),
    sa.Column('mt', npf.DeclEnumType(name='DestinationMatchType', values=['exact', 'prefix', 'suffix', 'regex']), npd.Comment('Destination match type'), server_default=sa.text("'prefix'"), nullable=False),
    sa.Column('dsid', npf.UInt32(), npd.Comment('Destination set ID'), nullable=False),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Destination name'), nullable=False),
    sa.Column('active', npf.NPBoolean(), npd.Comment('Is destination active?'), server_default=npf.npbool(True), nullable=False),
    sa.Column('l_ord', npf.UInt16(), npd.Comment('Lookup order'), server_default=sa.text('1000'), nullable=False),
    sa.Column('match', npf.ASCIIString(length=255), npd.Comment('Match expression'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('oqsum_sec', npf.Money(precision=20, scale=8), npd.Comment('Over quota per second override'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('oqmul_sec', npf.Money(precision=20, scale=8), npd.Comment('Over quota per second multiplier'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('cb_acct', npf.ASCIIString(length=255), npd.Comment('Callback on accounting'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['dsid'], ['dest_sets.dsid'], name='dest_def_fk_dsid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('destid', name=op.f('dest_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('dest_def', 'Accounting destinations')
    op.create_index('dest_def_i_active', 'dest_def', ['active'], unique=False)
    op.create_index('dest_def_i_dsid', 'dest_def', ['dsid'], unique=False)
    op.create_index('dest_def_i_l_ord', 'dest_def', ['l_ord'], unique=False)
    op.create_table('filters_def',
    sa.Column('fid', npf.UInt32(), npd.Comment('Filter ID'), nullable=False, default=sa.Sequence('filters_def_fid_seq')),
    sa.Column('fsid', npf.UInt32(), npd.Comment('Filter set ID'), nullable=False),
    sa.Column('porttype', npf.UInt32(), npd.Comment('Required NAS-Port-Type'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('servicetype', npf.UInt32(), npd.Comment('Required Service-Type'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('frproto', npf.UInt32(), npd.Comment('Required Framed-Protocol'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('tuntype', npf.UInt32(), npd.Comment('Required Tunnel-Type'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('tunmedium', npf.UInt32(), npd.Comment('Required Tunnel-Medium-Type'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['fsid'], ['filters_sets.fsid'], name='filters_def_fk_fsid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('fid', name=op.f('filters_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('filters_def', 'Accounting filters')
    op.create_index('filters_def_i_fsid', 'filters_def', ['fsid'], unique=False)
    op.create_table('rates_def',
    sa.Column('rateid', npf.UInt32(), npd.Comment('Rate ID'), nullable=False, default=sa.Sequence('rates_def_rateid_seq')),
    sa.Column('type', npf.DeclEnumType(name='RateType', values=['prepaid', 'prepaid_cont', 'postpaid', 'free']), npd.Comment('Rate usage type'), server_default=sa.text("'prepaid'"), nullable=False),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Rate name'), nullable=False),
    sa.Column('polled', npf.NPBoolean(), npd.Comment('Is periodically polled?'), server_default=npf.npbool(False), nullable=False),
    sa.Column('abf', npf.NPBoolean(), npd.Comment('Use advanced billing features'), server_default=npf.npbool(False), nullable=False),
    sa.Column('usersel', npf.NPBoolean(), npd.Comment('Is user-selectable?'), server_default=npf.npbool(False), nullable=False),
    sa.Column('oq_ingress', npf.NPBoolean(), npd.Comment('Allow going over quota on ingress traffic?'), server_default=npf.npbool(True), nullable=False),
    sa.Column('oq_egress', npf.NPBoolean(), npd.Comment('Allow going over quota on egress traffic?'), server_default=npf.npbool(True), nullable=False),
    sa.Column('rcid', npf.UInt32(), npd.Comment('Rate class ID'), server_default=sa.text('1'), nullable=False),
    sa.Column('poolid', npf.UInt32(), npd.Comment('IP address pool ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('dsid', npf.UInt32(), npd.Comment('Accounting destination set ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('fsid', npf.UInt32(), npd.Comment('Accounting filter set ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('qp_amount', npf.UInt16(), npd.Comment('Quota period amount'), server_default=sa.text('1'), nullable=False),
    sa.Column('qp_unit', npf.DeclEnumType(name='QuotaPeriodUnit', values=['a_hour', 'a_day', 'a_week', 'a_month', 'a_year', 'c_hour', 'c_day', 'c_month', 'c_year', 'f_hour', 'f_day', 'f_week', 'f_month', 'f_year']), npd.Comment('Quota period unit'), server_default=sa.text("'c_month'"), nullable=False),
    sa.Column('qsum', npf.Money(precision=20, scale=8), npd.Comment('Quota sum'), server_default=sa.text('0.0'), nullable=False),
    sa.Column('auxsum', npf.Money(precision=20, scale=8), npd.Comment('Auxiliary sum'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('qt_ingress', npf.Traffic(precision=16, scale=0), npd.Comment('Ingress traffic included in quota (in bytes)'), server_default=sa.text('0'), nullable=False),
    sa.Column('qt_egress', npf.Traffic(precision=16, scale=0), npd.Comment('Egress traffic included in quota (in bytes)'), server_default=sa.text('0'), nullable=False),
    sa.Column('qsec', npf.UInt32(), npd.Comment('Session time included in quota (in seconds)'), server_default=sa.text('0'), nullable=False),
    sa.Column('oqsum_ingress', npf.Money(precision=20, scale=8), npd.Comment('Over quota payment for ingress traffic (per byte)'), server_default=sa.text('0.0'), nullable=False),
    sa.Column('oqsum_egress', npf.Money(precision=20, scale=8), npd.Comment('Over quota payment for egress traffic (per byte)'), server_default=sa.text('0.0'), nullable=False),
    sa.Column('oqsum_sec', npf.Money(precision=20, scale=8), npd.Comment('Over quota payment for time (per second)'), server_default=sa.text('0.0'), nullable=False),
    sa.Column('sim', npf.UInt16(), npd.Comment('Max. number of simultaneous sessions (per user)'), server_default=sa.text('0'), nullable=False),
    sa.Column('pol_ingress', npf.ASCIIString(length=255), npd.Comment('Ingress traffic policy'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pol_egress', npf.ASCIIString(length=255), npd.Comment('Egress traffic policy'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('block_timeframe', npf.UInt16(), npd.Comment('Max continuous blocking time (in accounting periods)'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('cb_qsum_before', npf.ASCIIString(length=255), npd.Comment('Callback before quota payment'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('cb_qsum_success', npf.ASCIIString(length=255), npd.Comment('Callback on successful quota payment'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('cb_qsum_failure', npf.ASCIIString(length=255), npd.Comment('Callback on failed quota payment'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('cb_after_connect', npf.ASCIIString(length=255), npd.Comment('Callback after connecting'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('cb_after_disconnect', npf.ASCIIString(length=255), npd.Comment('Callback after disconnecting'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Rate description'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['dsid'], ['dest_sets.dsid'], name='rates_def_fk_dsid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['fsid'], ['filters_sets.fsid'], name='rates_def_fk_fsid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['poolid'], ['ippool_def.poolid'], name='rates_def_fk_poolid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['rcid'], ['rates_classes_def.rcid'], name='rates_def_fk_rcid', onupdate='CASCADE'),
    sa.PrimaryKeyConstraint('rateid', name=op.f('rates_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('rates_def', 'Payment rates')
    op.create_trigger('netprofile_rates', 'rates_def', 'after', 'insert', 'e27d4c93c89d')
    op.create_trigger('netprofile_rates', 'rates_def', 'after', 'update', 'e27d4c93c89d')
    op.create_trigger('netprofile_rates', 'rates_def', 'after', 'delete', 'e27d4c93c89d')
    op.create_index('rates_def_i_dsid', 'rates_def', ['dsid'], unique=False)
    op.create_index('rates_def_i_fsid', 'rates_def', ['fsid'], unique=False)
    op.create_index('rates_def_i_polled', 'rates_def', ['polled'], unique=False)
    op.create_index('rates_def_i_poolid', 'rates_def', ['poolid'], unique=False)
    op.create_index('rates_def_i_rcid', 'rates_def', ['rcid'], unique=False)
    op.create_index('rates_def_u_name', 'rates_def', ['name'], unique=True)
    op.create_table('rates_mods_types',
    sa.Column('rmtid', npf.UInt32(), npd.Comment('Rate modifier type ID'), nullable=False, default=sa.Sequence('rates_mods_types_rmtid_seq')),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Rate modifier type name'), nullable=False),
    sa.Column('enabled', npf.NPBoolean(), npd.Comment('Is modifier type enabled?'), server_default=npf.npbool(False), nullable=False),
    sa.Column('bperiodid', npf.UInt32(), npd.Comment('Billing period ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('oqsum_ingress_mul', npf.Money(precision=20, scale=8), npd.Comment('Ingress overquota sum multiplier'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('oqsum_egress_mul', npf.Money(precision=20, scale=8), npd.Comment('Egress overquota sum multiplier'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('oqsum_sec_mul', npf.Money(precision=20, scale=8), npd.Comment('Per-second overquota sum multiplier'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('ow_ingress', npf.NPBoolean(), npd.Comment('Overwrite ingress policy?'), server_default=npf.npbool(False), nullable=False),
    sa.Column('ow_egress', npf.NPBoolean(), npd.Comment('Overwrite egress policy?'), server_default=npf.npbool(False), nullable=False),
    sa.Column('pol_ingress', npf.ASCIIString(length=255), npd.Comment('Ingress traffic policy'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pol_egress', npf.ASCIIString(length=255), npd.Comment('Egress traffic policy'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Rate modifier description'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['bperiodid'], ['bperiods_def.bperiodid'], name='rates_mods_types_fk_bperiodid', onupdate='CASCADE'),
    sa.PrimaryKeyConstraint('rmtid', name=op.f('rates_mods_types_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('rates_mods_types', 'Rate modifier types')
    op.create_index('rates_mods_types_i_bperiodid', 'rates_mods_types', ['bperiodid'], unique=False)
    op.create_index('rates_mods_types_u_name', 'rates_mods_types', ['name'], unique=True)
    op.create_table('rates_classes_etypes',
    sa.Column('rcmapid', npf.UInt32(), npd.Comment('Rate class to entity type mapping ID'), nullable=False, default=sa.Sequence('rates_classes_etypes_rcmapid_seq')),
    sa.Column('rcid', npf.UInt32(), npd.Comment('Rate class ID'), nullable=False),
    sa.Column('etypeid', npf.UInt32(), npd.Comment('Entity type ID'), nullable=False),
    sa.ForeignKeyConstraint(['etypeid'], ['entities_types.etypeid'], name='rates_classes_etypes_fk_etypeid', onupdate='CASCADE'),
    sa.ForeignKeyConstraint(['rcid'], ['rates_classes_def.rcid'], name='rates_classes_etypes_fk_rcid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('rcmapid', name=op.f('rates_classes_etypes_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('rates_classes_etypes', 'Rate class mappings to entity types')
    op.create_index('rates_classes_etypes_i_etypeid', 'rates_classes_etypes', ['etypeid'], unique=False)
    op.create_index('rates_classes_etypes_u_mapping', 'rates_classes_etypes', ['rcid', 'etypeid'], unique=True)
    op.create_table('rates_mods_global',
    sa.Column('rmid', npf.UInt32(), npd.Comment('Rate modifier ID'), nullable=False, default=sa.Sequence('rates_mods_global_rmid_seq')),
    sa.Column('rmtid', npf.UInt32(), npd.Comment('Rate modifier type ID'), nullable=False),
    sa.Column('rateid', npf.UInt32(), npd.Comment('Rate ID'), nullable=False),
    sa.Column('ctime', sa.TIMESTAMP(), npd.Comment('Creation timestamp'), server_default=FetchedValue(), nullable=True),
    sa.Column('enabled', npf.NPBoolean(), npd.Comment('Is modifier enabled?'), server_default=npf.npbool(False), nullable=False),
    sa.Column('l_ord', npf.UInt16(), npd.Comment('Lookup order'), server_default=sa.text('1000'), nullable=False),
    sa.ForeignKeyConstraint(['rateid'], ['rates_def.rateid'], name='rates_mods_global_fk_rateid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['rmtid'], ['rates_mods_types.rmtid'], name='rates_mods_global_fk_rmtid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('rmid', name=op.f('rates_mods_global_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('rates_mods_global', 'Global rate modifiers')
    op.create_trigger('netprofile_rates', 'rates_mods_global', 'before', 'insert', 'e27d4c93c89d')
    op.create_index('rates_mods_global_i_l_ord', 'rates_mods_global', ['l_ord'], unique=False)
    op.create_index('rates_mods_global_i_rateid', 'rates_mods_global', ['rateid'], unique=False)
    op.create_index('rates_mods_global_u_mapping', 'rates_mods_global', ['rmtid', 'rateid'], unique=True)
    op.create_function('rates', npd.SQLFunction('acct_rate_qpnew', args=[npd.SQLFunctionArgument('qpa', npf.UInt16(), None), npd.SQLFunctionArgument('qpu', npf.DeclEnumType(name='QuotaPeriodUnit', values=['a_hour', 'a_day', 'a_week', 'a_month', 'a_year', 'c_hour', 'c_day', 'c_month', 'c_year', 'f_hour', 'f_day', 'f_week', 'f_month', 'f_year']), None), npd.SQLFunctionArgument('time', sa.DateTime(), None)], returns=npf.UInt32(), comment='Calculate new quota period to seconds', reads_sql=False, writes_sql=False, is_procedure=False, label=None), 'e27d4c93c89d')
    op.create_function('rates', npd.SQLFunction('acct_rate_qplength', args=[npd.SQLFunctionArgument('qpa', npf.UInt16(), None), npd.SQLFunctionArgument('qpu', npf.DeclEnumType(name='QuotaPeriodUnit', values=['a_hour', 'a_day', 'a_week', 'a_month', 'a_year', 'c_hour', 'c_day', 'c_month', 'c_year', 'f_hour', 'f_day', 'f_week', 'f_month', 'f_year']), None), npd.SQLFunctionArgument('endtime', sa.DateTime(), None)], returns=npf.UInt32(), comment='Calculate length of current quota period in seconds', reads_sql=False, writes_sql=False, is_procedure=False, label=None), 'e27d4c93c89d')
    op.create_function('rates', npd.SQLFunction('acct_rate_qpcount', args=[npd.SQLFunctionArgument('qpa', npf.UInt16(), None), npd.SQLFunctionArgument('qpu', npf.DeclEnumType(name='QuotaPeriodUnit', values=['a_hour', 'a_day', 'a_week', 'a_month', 'a_year', 'c_hour', 'c_day', 'c_month', 'c_year', 'f_hour', 'f_day', 'f_week', 'f_month', 'f_year']), None), npd.SQLFunctionArgument('dfrom', sa.DateTime(), None), npd.SQLFunctionArgument('dto', sa.DateTime(), None)], returns=npf.UInt32(), comment='Calculate number of periods between two dates', reads_sql=False, writes_sql=False, is_procedure=False, label=None), 'e27d4c93c89d')
    op.create_function('rates', npd.SQLFunction('acct_rate_dest', args=[npd.SQLFunctionArgument('ts', sa.DateTime(), 'IN'), npd.SQLFunctionArgument('rateid', npf.UInt32(), 'IN'), npd.SQLFunctionArgument('dsid', npf.UInt32(), 'IN'), npd.SQLFunctionArgument('called', npf.ASCIIString(length=255), 'IN'), npd.SQLFunctionArgument('destid', npf.UInt32(), 'INOUT'), npd.SQLFunctionArgument('dtype', npf.DeclEnumType(name='DestinationType', values=['normal', 'noquota', 'onlyquota', 'reject']), 'INOUT'), npd.SQLFunctionArgument('oqsum_sec', npf.Money(precision=20, scale=8), 'INOUT')], returns=None, comment='Search destination sets for a match', reads_sql=True, writes_sql=False, is_procedure=True, label='ardfunc'), 'e27d4c93c89d')
    op.create_function('rates', npd.SQLFunction('acct_rate_filter', args=[npd.SQLFunctionArgument('fsid', npf.UInt32(), 'IN'), npd.SQLFunctionArgument('r_porttype', npf.Int32(), 'IN'), npd.SQLFunctionArgument('r_servicetype', npf.Int32(), 'IN'), npd.SQLFunctionArgument('r_frproto', npf.Int32(), 'IN'), npd.SQLFunctionArgument('r_tuntype', npf.Int32(), 'IN'), npd.SQLFunctionArgument('r_tunmedium', npf.Int32(), 'IN'), npd.SQLFunctionArgument('filterid', npf.UInt32(), 'OUT')], returns=None, comment='Search filter sets for a match', reads_sql=True, writes_sql=False, is_procedure=True, label='arffunc'), 'e27d4c93c89d')
    op.create_function('rates', npd.SQLFunction('acct_rate_qpspent', args=[npd.SQLFunctionArgument('qpa', npf.UInt16(), None), npd.SQLFunctionArgument('qpu', npf.DeclEnumType(name='QuotaPeriodUnit', values=['a_hour', 'a_day', 'a_week', 'a_month', 'a_year', 'c_hour', 'c_day', 'c_month', 'c_year', 'f_hour', 'f_day', 'f_week', 'f_month', 'f_year']), None), npd.SQLFunctionArgument('time', sa.DateTime(), None), npd.SQLFunctionArgument('endtime', sa.DateTime(), None)], returns=npf.UInt32(), comment='Calculate spent part of current quota period in seconds', reads_sql=False, writes_sql=False, is_procedure=False, label=None), 'e27d4c93c89d')
    op.create_function('rates', npd.SQLFunction('acct_rate_percent_remaining', args=[npd.SQLFunctionArgument('qpa', npf.UInt16(), None), npd.SQLFunctionArgument('qpu', npf.DeclEnumType(name='QuotaPeriodUnit', values=['a_hour', 'a_day', 'a_week', 'a_month', 'a_year', 'c_hour', 'c_day', 'c_month', 'c_year', 'f_hour', 'f_day', 'f_week', 'f_month', 'f_year']), None), npd.SQLFunctionArgument('time', sa.DateTime(), None), npd.SQLFunctionArgument('endtime', sa.DateTime(), None)], returns=npf.PercentFraction(precision=11, scale=10), comment='Calculate remaining part of current quota period', reads_sql=False, writes_sql=False, is_procedure=False, label=None), 'e27d4c93c89d')
    op.create_function('rates', npd.SQLFunction('acct_rate_percent_spent', args=[npd.SQLFunctionArgument('qpa', npf.UInt16(), None), npd.SQLFunctionArgument('qpu', npf.DeclEnumType(name='QuotaPeriodUnit', values=['a_hour', 'a_day', 'a_week', 'a_month', 'a_year', 'c_hour', 'c_day', 'c_month', 'c_year', 'f_hour', 'f_day', 'f_week', 'f_month', 'f_year']), None), npd.SQLFunctionArgument('time', sa.DateTime(), None), npd.SQLFunctionArgument('endtime', sa.DateTime(), None)], returns=npf.PercentFraction(precision=11, scale=10), comment='Calculate spent part of current quota period', reads_sql=False, writes_sql=False, is_procedure=False, label=None), 'e27d4c93c89d')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_function('rates', npd.SQLFunction('acct_rate_percent_spent', args=[npd.SQLFunctionArgument('qpa', npf.UInt16(), None), npd.SQLFunctionArgument('qpu', npf.DeclEnumType(name='QuotaPeriodUnit', values=['a_hour', 'a_day', 'a_week', 'a_month', 'a_year', 'c_hour', 'c_day', 'c_month', 'c_year', 'f_hour', 'f_day', 'f_week', 'f_month', 'f_year']), None), npd.SQLFunctionArgument('time', sa.DateTime(), None), npd.SQLFunctionArgument('endtime', sa.DateTime(), None)], returns=npf.PercentFraction(precision=11, scale=10), comment='Calculate spent part of current quota period', reads_sql=False, writes_sql=False, is_procedure=False, label=None), 'e27d4c93c89d')
    op.drop_function('rates', npd.SQLFunction('acct_rate_percent_remaining', args=[npd.SQLFunctionArgument('qpa', npf.UInt16(), None), npd.SQLFunctionArgument('qpu', npf.DeclEnumType(name='QuotaPeriodUnit', values=['a_hour', 'a_day', 'a_week', 'a_month', 'a_year', 'c_hour', 'c_day', 'c_month', 'c_year', 'f_hour', 'f_day', 'f_week', 'f_month', 'f_year']), None), npd.SQLFunctionArgument('time', sa.DateTime(), None), npd.SQLFunctionArgument('endtime', sa.DateTime(), None)], returns=npf.PercentFraction(precision=11, scale=10), comment='Calculate remaining part of current quota period', reads_sql=False, writes_sql=False, is_procedure=False, label=None), 'e27d4c93c89d')
    op.drop_function('rates', npd.SQLFunction('acct_rate_qpspent', args=[npd.SQLFunctionArgument('qpa', npf.UInt16(), None), npd.SQLFunctionArgument('qpu', npf.DeclEnumType(name='QuotaPeriodUnit', values=['a_hour', 'a_day', 'a_week', 'a_month', 'a_year', 'c_hour', 'c_day', 'c_month', 'c_year', 'f_hour', 'f_day', 'f_week', 'f_month', 'f_year']), None), npd.SQLFunctionArgument('time', sa.DateTime(), None), npd.SQLFunctionArgument('endtime', sa.DateTime(), None)], returns=npf.UInt32(), comment='Calculate spent part of current quota period in seconds', reads_sql=False, writes_sql=False, is_procedure=False, label=None), 'e27d4c93c89d')
    op.drop_function('rates', npd.SQLFunction('acct_rate_filter', args=[npd.SQLFunctionArgument('fsid', npf.UInt32(), 'IN'), npd.SQLFunctionArgument('r_porttype', npf.Int32(), 'IN'), npd.SQLFunctionArgument('r_servicetype', npf.Int32(), 'IN'), npd.SQLFunctionArgument('r_frproto', npf.Int32(), 'IN'), npd.SQLFunctionArgument('r_tuntype', npf.Int32(), 'IN'), npd.SQLFunctionArgument('r_tunmedium', npf.Int32(), 'IN'), npd.SQLFunctionArgument('filterid', npf.UInt32(), 'OUT')], returns=None, comment='Search filter sets for a match', reads_sql=True, writes_sql=False, is_procedure=True, label='arffunc'), 'e27d4c93c89d')
    op.drop_function('rates', npd.SQLFunction('acct_rate_dest', args=[npd.SQLFunctionArgument('ts', sa.DateTime(), 'IN'), npd.SQLFunctionArgument('rateid', npf.UInt32(), 'IN'), npd.SQLFunctionArgument('dsid', npf.UInt32(), 'IN'), npd.SQLFunctionArgument('called', npf.ASCIIString(length=255), 'IN'), npd.SQLFunctionArgument('destid', npf.UInt32(), 'INOUT'), npd.SQLFunctionArgument('dtype', npf.DeclEnumType(name='DestinationType', values=['normal', 'noquota', 'onlyquota', 'reject']), 'INOUT'), npd.SQLFunctionArgument('oqsum_sec', npf.Money(precision=20, scale=8), 'INOUT')], returns=None, comment='Search destination sets for a match', reads_sql=True, writes_sql=False, is_procedure=True, label='ardfunc'), 'e27d4c93c89d')
    op.drop_function('rates', npd.SQLFunction('acct_rate_qpcount', args=[npd.SQLFunctionArgument('qpa', npf.UInt16(), None), npd.SQLFunctionArgument('qpu', npf.DeclEnumType(name='QuotaPeriodUnit', values=['a_hour', 'a_day', 'a_week', 'a_month', 'a_year', 'c_hour', 'c_day', 'c_month', 'c_year', 'f_hour', 'f_day', 'f_week', 'f_month', 'f_year']), None), npd.SQLFunctionArgument('dfrom', sa.DateTime(), None), npd.SQLFunctionArgument('dto', sa.DateTime(), None)], returns=npf.UInt32(), comment='Calculate number of periods between two dates', reads_sql=False, writes_sql=False, is_procedure=False, label=None), 'e27d4c93c89d')
    op.drop_function('rates', npd.SQLFunction('acct_rate_qplength', args=[npd.SQLFunctionArgument('qpa', npf.UInt16(), None), npd.SQLFunctionArgument('qpu', npf.DeclEnumType(name='QuotaPeriodUnit', values=['a_hour', 'a_day', 'a_week', 'a_month', 'a_year', 'c_hour', 'c_day', 'c_month', 'c_year', 'f_hour', 'f_day', 'f_week', 'f_month', 'f_year']), None), npd.SQLFunctionArgument('endtime', sa.DateTime(), None)], returns=npf.UInt32(), comment='Calculate length of current quota period in seconds', reads_sql=False, writes_sql=False, is_procedure=False, label=None), 'e27d4c93c89d')
    op.drop_function('rates', npd.SQLFunction('acct_rate_qpnew', args=[npd.SQLFunctionArgument('qpa', npf.UInt16(), None), npd.SQLFunctionArgument('qpu', npf.DeclEnumType(name='QuotaPeriodUnit', values=['a_hour', 'a_day', 'a_week', 'a_month', 'a_year', 'c_hour', 'c_day', 'c_month', 'c_year', 'f_hour', 'f_day', 'f_week', 'f_month', 'f_year']), None), npd.SQLFunctionArgument('time', sa.DateTime(), None)], returns=npf.UInt32(), comment='Calculate new quota period to seconds', reads_sql=False, writes_sql=False, is_procedure=False, label=None), 'e27d4c93c89d')
    op.drop_index('rates_mods_global_u_mapping', table_name='rates_mods_global')
    op.drop_index('rates_mods_global_i_rateid', table_name='rates_mods_global')
    op.drop_index('rates_mods_global_i_l_ord', table_name='rates_mods_global')
    op.drop_table('rates_mods_global')
    op.drop_index('rates_classes_etypes_u_mapping', table_name='rates_classes_etypes')
    op.drop_index('rates_classes_etypes_i_etypeid', table_name='rates_classes_etypes')
    op.drop_table('rates_classes_etypes')
    op.drop_index('rates_mods_types_u_name', table_name='rates_mods_types')
    op.drop_index('rates_mods_types_i_bperiodid', table_name='rates_mods_types')
    op.drop_table('rates_mods_types')
    op.drop_index('rates_def_u_name', table_name='rates_def')
    op.drop_index('rates_def_i_rcid', table_name='rates_def')
    op.drop_index('rates_def_i_poolid', table_name='rates_def')
    op.drop_index('rates_def_i_polled', table_name='rates_def')
    op.drop_index('rates_def_i_fsid', table_name='rates_def')
    op.drop_index('rates_def_i_dsid', table_name='rates_def')
    op.drop_table('rates_def')
    op.drop_index('filters_def_i_fsid', table_name='filters_def')
    op.drop_table('filters_def')
    op.drop_index('dest_def_i_l_ord', table_name='dest_def')
    op.drop_index('dest_def_i_dsid', table_name='dest_def')
    op.drop_index('dest_def_i_active', table_name='dest_def')
    op.drop_table('dest_def')
    op.drop_index('rates_classes_def_u_name', table_name='rates_classes_def')
    op.drop_table('rates_classes_def')
    op.drop_index('filters_sets_u_name', table_name='filters_sets')
    op.drop_table('filters_sets')
    op.drop_index('dest_sets_u_name', table_name='dest_sets')
    op.drop_table('dest_sets')
    op.drop_index('bperiods_def_u_name', table_name='bperiods_def')
    op.drop_index('bperiods_def_i_wday', table_name='bperiods_def')
    op.drop_index('bperiods_def_i_month', table_name='bperiods_def')
    op.drop_index('bperiods_def_i_minute', table_name='bperiods_def')
    op.drop_index('bperiods_def_i_mday', table_name='bperiods_def')
    op.drop_index('bperiods_def_i_hour', table_name='bperiods_def')
    op.drop_table('bperiods_def')
    # ### end Alembic commands ###

