"""Initial revision

Revision ID: 2e190ad964b4
Revises: 
Create Date: 2017-09-25 15:07:50.742634

"""

# revision identifiers, used by Alembic.
revision = '2e190ad964b4'
down_revision = None
branch_labels = ('stashes',)
depends_on = '16be1c0cddd0'

from alembic import op
import sqlalchemy as sa
from sqlalchemy import FetchedValue
from netprofile.db import ddl as npd
from netprofile.db import fields as npf

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('currencies_def',
    sa.Column('currid', npf.UInt32(), npd.Comment('Currency ID'), nullable=False, default=sa.Sequence('currencies_def_currid_seq')),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Currency name'), nullable=False),
    sa.Column('code', sa.CHAR(length=3), npd.Comment('ISO 4217 currency code'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('prefix', sa.Unicode(length=16), npd.Comment('Currency symbol prefix'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('suffix', sa.Unicode(length=16), npd.Comment('Currency symbol suffix'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('xchange_rate', npf.Money(precision=20, scale=8), npd.Comment('Fallback exchange rate with default currency'), server_default=sa.text('1'), nullable=False),
    sa.Column('xchange_from', npf.NPBoolean(), npd.Comment('Can exchange from this currency'), server_default=npf.npbool(False), nullable=False),
    sa.Column('xchange_to', npf.NPBoolean(), npd.Comment('Can exchange to this currency'), server_default=npf.npbool(False), nullable=False),
    sa.Column('convert_from', npf.NPBoolean(), npd.Comment('Allow converting stashes from this currency'), server_default=npf.npbool(False), nullable=False),
    sa.Column('convert_to', npf.NPBoolean(), npd.Comment('Allow converting stashes to this currency'), server_default=npf.npbool(False), nullable=False),
    sa.Column('allow_credit', npf.NPBoolean(), npd.Comment('Allow crediting with this currency'), server_default=npf.npbool(True), nullable=False),
    sa.Column('allow_accounts', npf.NPBoolean(), npd.Comment('Allow linking accounts to stashes with this currency'), server_default=npf.npbool(False), nullable=False),
    sa.Column('allow_services', npf.NPBoolean(), npd.Comment('Allow linking paid services to stashes with this currency'), server_default=npf.npbool(False), nullable=False),
    sa.Column('allow_futures', npf.NPBoolean(), npd.Comment('Allow promised payments to stashes with this currency'), server_default=npf.npbool(False), nullable=False),
    sa.Column('oper_visible', npf.NPBoolean(), npd.Comment('Visibility in operator interface'), server_default=npf.npbool(False), nullable=False),
    sa.Column('user_visible', npf.NPBoolean(), npd.Comment('Visibility in user interface'), server_default=npf.npbool(False), nullable=False),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Currency description'), server_default=sa.text('NULL'), nullable=True),
    sa.PrimaryKeyConstraint('currid', name=op.f('currencies_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('currencies_def', 'Currencies')
    op.create_index('currencies_def_u_code', 'currencies_def', ['code'], unique=True)
    op.create_index('currencies_def_u_name', 'currencies_def', ['name'], unique=True)
    op.create_table('stashes_io_types',
    sa.Column('siotypeid', npf.UInt32(), npd.Comment('Stash I/O ID'), nullable=False, default=sa.Sequence('stashes_io_types_siotypeid_seq', start=101, increment=1)),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Stash I/O name'), nullable=False),
    sa.Column('class', npf.DeclEnumType(name='OperationClass', values=['system', 'user']), npd.Comment('Stash I/O class'), server_default=sa.text("'system'"), nullable=False),
    sa.Column('type', npf.DeclEnumType(name='IOOperationType', values=['inout', 'in', 'out']), npd.Comment('Stash I/O type'), server_default=sa.text("'inout'"), nullable=False),
    sa.Column('ftype', npf.DeclEnumType(name='IOFunctionType', values=['rate_qsum_pre', 'rate_qsum_post', 'rate_rollback', 'future_confirm', 'xfer_in', 'xfer_out', 'ps_isum', 'ps_qsum']), npd.Comment('Special built-in function for this I/O type'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('oper_visible', npf.NPBoolean(), npd.Comment('Visibility in operator interface'), server_default=npf.npbool(False), nullable=False),
    sa.Column('user_visible', npf.NPBoolean(), npd.Comment('Visibility in user interface'), server_default=npf.npbool(False), nullable=False),
    sa.Column('pays_futures', npf.NPBoolean(), npd.Comment('Serves as a fulfillment for promised payments'), server_default=npf.npbool(False), nullable=False),
    sa.Column('oper_cap', npf.ASCIIString(length=48), npd.Comment('Stash I/O required operator capability'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Stash I/O description'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['oper_cap'], ['privileges.code'], name='stashes_io_types_fk_oper_cap', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('siotypeid', name=op.f('stashes_io_types_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('stashes_io_types', 'Stashes input/output operation types')
    op.create_index('stashes_io_types_i_oper_cap', 'stashes_io_types', ['oper_cap'], unique=False)
    op.create_index('stashes_io_types_i_oper_visible', 'stashes_io_types', ['oper_visible'], unique=False)
    op.create_index('stashes_io_types_i_type', 'stashes_io_types', ['type'], unique=False)
    op.create_index('stashes_io_types_i_user_visible', 'stashes_io_types', ['user_visible'], unique=False)
    op.create_index('stashes_io_types_u_ftype', 'stashes_io_types', ['ftype'], unique=True)
    op.create_table('stashes_def',
    sa.Column('stashid', npf.UInt32(), npd.Comment('Stash ID'), nullable=False, default=sa.Sequence('stashes_def_stashid_seq')),
    sa.Column('entityid', npf.UInt32(), npd.Comment('Owner entity ID'), nullable=False),
    sa.Column('currid', npf.UInt32(), npd.Comment('Currency ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('name', sa.Unicode(length=255), npd.Comment('Stash name'), nullable=False),
    sa.Column('amount', npf.Money(precision=20, scale=8), npd.Comment('Stash balance'), server_default=sa.text('0'), nullable=False),
    sa.Column('credit', npf.Money(precision=20, scale=8), npd.Comment('Stash credit'), server_default=sa.text('0'), nullable=False),
    sa.Column('alltime_max', npf.Money(precision=20, scale=8), npd.Comment('All-time maximum balance'), server_default=sa.text('0'), nullable=False),
    sa.Column('alltime_min', npf.Money(precision=20, scale=8), npd.Comment('All-time minimum balance'), server_default=sa.text('0'), nullable=False),
    sa.ForeignKeyConstraint(['currid'], ['currencies_def.currid'], name='stashes_def_fk_currid', onupdate='CASCADE'),
    sa.ForeignKeyConstraint(['entityid'], ['entities_def.entityid'], name='stashes_def_fk_entityid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('stashid', name=op.f('stashes_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('stashes_def', 'Stashes of money')
    op.create_trigger('netprofile_stashes', 'stashes_def', 'before', 'insert', '2e190ad964b4')
    op.create_trigger('netprofile_stashes', 'stashes_def', 'before', 'update', '2e190ad964b4')
    op.create_index('stashes_def_i_currid', 'stashes_def', ['currid'], unique=False)
    op.create_index('stashes_def_i_entityid', 'stashes_def', ['entityid'], unique=False)
    op.create_table('futures_def',
    sa.Column('futureid', npf.UInt32(), npd.Comment('Future payment ID'), nullable=False, default=sa.Sequence('futures_def_futureid_seq')),
    sa.Column('entityid', npf.UInt32(), npd.Comment('Entity ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('stashid', npf.UInt32(), npd.Comment('Stash ID'), nullable=False),
    sa.Column('diff', npf.Money(precision=20, scale=8), npd.Comment('Payment result'), server_default=sa.text('0.0'), nullable=False),
    sa.Column('state', npf.DeclEnumType(name='FuturePaymentState', values=['A', 'P', 'C']), npd.Comment('Active / Paid / Cancelled'), server_default=sa.text("'A'"), nullable=False),
    sa.Column('origin', npf.DeclEnumType(name='FuturePaymentOrigin', values=['oper', 'user']), npd.Comment('Origin of payment'), server_default=sa.text("'oper'"), nullable=False),
    sa.Column('ctime', sa.TIMESTAMP(), npd.Comment('Creation timestamp'), server_default=FetchedValue(), nullable=True),
    sa.Column('mtime', sa.TIMESTAMP(), npd.Comment('Last modification timestamp'), server_default=npd.CurrentTimestampDefault(on_update=True), nullable=False),
    sa.Column('ptime', sa.TIMESTAMP(), npd.Comment('Payment timestamp'), server_default=FetchedValue(), nullable=True),
    sa.Column('cby', npf.UInt32(), npd.Comment('Created by'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('mby', npf.UInt32(), npd.Comment('Modified by'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('pby', npf.UInt32(), npd.Comment('Payment confirmed by'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Description'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['cby'], ['users.uid'], name='futures_def_fk_cby', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['entityid'], ['entities_def.entityid'], name='futures_def_fk_entityid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['mby'], ['users.uid'], name='futures_def_fk_mby', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['pby'], ['users.uid'], name='futures_def_fk_pby', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['stashid'], ['stashes_def.stashid'], name='futures_def_fk_stashid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('futureid', name=op.f('futures_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('futures_def', 'Future payments')
    op.create_trigger('netprofile_stashes', 'futures_def', 'before', 'insert', '2e190ad964b4')
    op.create_trigger('netprofile_stashes', 'futures_def', 'before', 'update', '2e190ad964b4')
    op.create_trigger('netprofile_stashes', 'futures_def', 'after', 'insert', '2e190ad964b4')
    op.create_trigger('netprofile_stashes', 'futures_def', 'after', 'update', '2e190ad964b4')
    op.create_trigger('netprofile_stashes', 'futures_def', 'after', 'delete', '2e190ad964b4')
    op.create_index('futures_def_i_cby', 'futures_def', ['cby'], unique=False)
    op.create_index('futures_def_i_entityid', 'futures_def', ['entityid'], unique=False)
    op.create_index('futures_def_i_futures', 'futures_def', ['state', 'ptime'], unique=False)
    op.create_index('futures_def_i_mby', 'futures_def', ['mby'], unique=False)
    op.create_index('futures_def_i_pby', 'futures_def', ['pby'], unique=False)
    op.create_index('futures_def_i_stashid', 'futures_def', ['stashid'], unique=False)
    op.create_table('stashes_io_def',
    sa.Column('sioid', npf.UInt32(), npd.Comment('Stash I/O ID'), nullable=False, default=sa.Sequence('stashes_io_def_sioid_seq')),
    sa.Column('siotypeid', npf.UInt32(), npd.Comment('Stash I/O type ID'), nullable=False),
    sa.Column('stashid', npf.UInt32(), npd.Comment('Stash ID'), nullable=False),
    sa.Column('currid', npf.UInt32(), npd.Comment('Currency ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('uid', npf.UInt32(), npd.Comment('User ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('entityid', npf.UInt32(), npd.Comment('Related entity ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('ts', sa.TIMESTAMP(), npd.Comment('Time stamp of operation'), server_default=npd.CurrentTimestampDefault(on_update=False), nullable=False),
    sa.Column('diff', npf.Money(precision=20, scale=8), npd.Comment('Operation result'), nullable=False),
    sa.Column('data', npf.JSONData(), npd.Comment('Extra data for use by extensions'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('descr', sa.UnicodeText(), npd.Comment('Description'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['currid'], ['currencies_def.currid'], name='stashes_io_def_fk_currid', onupdate='CASCADE'),
    sa.ForeignKeyConstraint(['entityid'], ['entities_def.entityid'], name='stashes_io_def_fk_entityid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['siotypeid'], ['stashes_io_types.siotypeid'], name='stashes_io_def_fk_siotypeid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['stashid'], ['stashes_def.stashid'], name='stashes_io_def_fk_stashid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uid'], ['users.uid'], name='stashes_io_def_fk_uid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('sioid', name=op.f('stashes_io_def_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('stashes_io_def', 'Stashes input/output operations')
    op.create_trigger('netprofile_stashes', 'stashes_io_def', 'before', 'insert', '2e190ad964b4')
    op.create_trigger('netprofile_stashes', 'stashes_io_def', 'after', 'insert', '2e190ad964b4')
    op.create_index('stashes_io_def_i_currid', 'stashes_io_def', ['currid'], unique=False)
    op.create_index('stashes_io_def_i_entityid', 'stashes_io_def', ['entityid'], unique=False)
    op.create_index('stashes_io_def_i_siotypeid', 'stashes_io_def', ['siotypeid'], unique=False)
    op.create_index('stashes_io_def_i_stashid', 'stashes_io_def', ['stashid'], unique=False)
    op.create_index('stashes_io_def_i_ts', 'stashes_io_def', ['ts'], unique=False)
    op.create_index('stashes_io_def_i_uid', 'stashes_io_def', ['uid'], unique=False)
    op.create_table('stashes_ops',
    sa.Column('stashopid', npf.UInt64(), npd.Comment('Stash operation ID'), nullable=False, default=sa.Sequence('stashes_ops_stashopid_seq')),
    sa.Column('stashid', npf.UInt32(), npd.Comment('Stash ID'), nullable=False),
    sa.Column('type', npf.DeclEnumType(name='StashOperationType', values=['sub_qin_qeg', 'sub_min_qeg', 'sub_oqin_qeg', 'sub_qin_meg', 'sub_qin_oqeg', 'sub_min_meg', 'sub_oqin_meg', 'sub_min_oqeg', 'sub_oqin_oqeg', 'add_cash', 'add_auto', 'oper', 'rollback']), npd.Comment('Type of operation'), server_default=sa.text("'oper'"), nullable=False),
    sa.Column('ts', sa.TIMESTAMP(), npd.Comment('Time stamp of operation'), server_default=npd.CurrentTimestampDefault(on_update=False), nullable=False),
    sa.Column('operator', npf.UInt32(), npd.Comment('Optional operator ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('entityid', npf.UInt32(), npd.Comment('Optional entity ID'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('diff', npf.Money(precision=20, scale=8), npd.Comment('Changes made to stash'), server_default=sa.text('0'), nullable=False),
    sa.Column('acct_ingress', npf.Traffic(precision=16, scale=0), npd.Comment('Accounted ingress traffic'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('acct_egress', npf.Traffic(precision=16, scale=0), npd.Comment('Accounted egress traffic'), server_default=sa.text('NULL'), nullable=True),
    sa.Column('comments', sa.UnicodeText(), npd.Comment('Optional Comments'), server_default=sa.text('NULL'), nullable=True),
    sa.ForeignKeyConstraint(['entityid'], ['entities_def.entityid'], name='stashes_ops_fk_entityid', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['operator'], ['users.uid'], name='stashes_ops_fk_operator', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['stashid'], ['stashes_def.stashid'], name='stashes_ops_fk_stashid', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('stashopid', name=op.f('stashes_ops_pk')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.set_table_comment('stashes_ops', 'Operations on stashes')
    op.create_index('stashes_ops_i_entityid', 'stashes_ops', ['entityid'], unique=False)
    op.create_index('stashes_ops_i_operator', 'stashes_ops', ['operator'], unique=False)
    op.create_index('stashes_ops_i_stashid', 'stashes_ops', ['stashid'], unique=False)
    op.create_index('stashes_ops_i_ts', 'stashes_ops', ['ts'], unique=False)
    op.create_index('stashes_ops_i_type', 'stashes_ops', ['type'], unique=False)
    op.create_function('stashes', npd.SQLFunction('futures_poll', args=[], returns=None, comment='Poll for expired futures', reads_sql=True, writes_sql=True, is_procedure=True, label=None), '2e190ad964b4')
    op.create_event('stashes', npd.SQLEvent('ev_futures_poll', sched_unit='hour', sched_interval=1, starts=None, preserve=True, enabled=True, comment='Poll for expired promised payments'), '2e190ad964b4')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_event('stashes', npd.SQLEvent('ev_futures_poll', sched_unit='hour', sched_interval=1, starts=None, preserve=True, enabled=True, comment='Poll for expired promised payments'), '2e190ad964b4')
    op.drop_function('stashes', npd.SQLFunction('futures_poll', args=[], returns=None, comment='Poll for expired futures', reads_sql=True, writes_sql=True, is_procedure=True, label=None), '2e190ad964b4')
    op.drop_index('stashes_ops_i_type', table_name='stashes_ops')
    op.drop_index('stashes_ops_i_ts', table_name='stashes_ops')
    op.drop_index('stashes_ops_i_stashid', table_name='stashes_ops')
    op.drop_index('stashes_ops_i_operator', table_name='stashes_ops')
    op.drop_index('stashes_ops_i_entityid', table_name='stashes_ops')
    op.drop_table('stashes_ops')
    op.drop_index('stashes_io_def_i_uid', table_name='stashes_io_def')
    op.drop_index('stashes_io_def_i_ts', table_name='stashes_io_def')
    op.drop_index('stashes_io_def_i_stashid', table_name='stashes_io_def')
    op.drop_index('stashes_io_def_i_siotypeid', table_name='stashes_io_def')
    op.drop_index('stashes_io_def_i_entityid', table_name='stashes_io_def')
    op.drop_index('stashes_io_def_i_currid', table_name='stashes_io_def')
    op.drop_table('stashes_io_def')
    op.drop_index('futures_def_i_stashid', table_name='futures_def')
    op.drop_index('futures_def_i_pby', table_name='futures_def')
    op.drop_index('futures_def_i_mby', table_name='futures_def')
    op.drop_index('futures_def_i_futures', table_name='futures_def')
    op.drop_index('futures_def_i_entityid', table_name='futures_def')
    op.drop_index('futures_def_i_cby', table_name='futures_def')
    op.drop_table('futures_def')
    op.drop_index('stashes_def_i_entityid', table_name='stashes_def')
    op.drop_index('stashes_def_i_currid', table_name='stashes_def')
    op.drop_table('stashes_def')
    op.drop_index('stashes_io_types_u_ftype', table_name='stashes_io_types')
    op.drop_index('stashes_io_types_i_user_visible', table_name='stashes_io_types')
    op.drop_index('stashes_io_types_i_type', table_name='stashes_io_types')
    op.drop_index('stashes_io_types_i_oper_visible', table_name='stashes_io_types')
    op.drop_index('stashes_io_types_i_oper_cap', table_name='stashes_io_types')
    op.drop_table('stashes_io_types')
    op.drop_index('currencies_def_u_name', table_name='currencies_def')
    op.drop_index('currencies_def_u_code', table_name='currencies_def')
    op.drop_table('currencies_def')
    # ### end Alembic commands ###

